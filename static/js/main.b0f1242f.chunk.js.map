{"version":3,"sources":["models/CourseModel.ts","interfaces/ModelInterfaces.ts","models/TermModel.ts","helpers/ConditionalTreeTraverser.ts","containers/SearchPanel/SearchPanelViewModel.tsx","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","contexts/ApplicationContext.ts","containers/Planner/PlannerViewModel.tsx","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/autoPlanButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/Planner/CourseView/CourseView.tsx","containers/Planner/TermView/TermView.tsx","containers/Planner/YearView/YearView.tsx","containers/Planner/Planner.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/AutoPlannerModel.ts","components/load/UploadButton.js","components/load/Save.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseStatus","ProgressionStatus","ErrorCode","CourseModel","code","contentTypeLabel","corequisites","creditPoints","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","studyLevel","termOffering","title","urlMap","allocatedTerm","undefined","id","courseStatus","UNPLANNED","_errors","Set","this","makeAutoObservable","term","ALLOCATED","clear","COMPLETED","PLANNED","error","add","delete","size","TermModel","year","name","mappingName","parseInt","split","update","obj","tryGetTermNumber","SearchPanelItem","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","result","length","push","and","isAndConditionalTree","forEach","CourseState","courseState","validations","course","console","log","includes","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","message","missing","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","join","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","getCourseById","EXCLUSION_COURSE_CONFLICT","coursesMapById","Map","coursesMapByActiveStatus","set","loadAllCourses","then","setPlanned","COMP9444","assignCourseToTerm","MATH1081","COMP2041","COMP9417","MATH1231","values","a","fetch","Request","method","mode","cache","response","json","jsonData","transaction","courseObj","addCourse","mapping","get","courseList","getMappingName","uniqueTerms","termCourseMap","keys","maxYear","Date","getFullYear","fromMappingName","sort","slice","reaction","courseStatusEnum","isNaN","Number","fireImmediately","runValidations","_course","clearErrors","fnValidate","allCourses","map","setUnplanned","prerequisiteTree","courseCode","isBefore","x","i","resp","courseIsOffered","getFullName","getMissingRequirementsWhenAssigningCourseToTerm","setAllocated","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","type","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","elementList","data","childContainerList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","curriculumStructure","intakePeriod","programConstraints","progressionStatus","SpecialisationModel","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","allPrograms","filter","program","allSpecialisations","specialisation","plannedPrograms","concat","plannedSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","SearchDataState","progressionState","b","searchDataState","ApplicationContext","createContext","getCourseGroupById","plannerState","groupId","completedGroup","plannedGroup","allocatedGroups","find","group","PlannerViewModel","_currentDraggableProps","isDragging","possibleTerms","prerequisiteCourseIds","makeObservable","observable","synchronizePlannerState","getCourseState","computed","getPlannerState","setCurrentDraggableProps","action","currentDraggableProps","clearCurrentDraggableProps","yearGroups","courses","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","has","coursesToAdd","index","indexOf","splice","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","getDisplayableTerms","uniqueYears","newPlannerState","toString","courseGroups","courseGroup","synchronizeCourseList","yearGroup","plannedCourses","completedCourses","props","FilterModel","fnGetTargetValue","possibleValues","selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","value","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","AutoPlanButtonStyle","backgroundColor","border","color","padding","textDecoration","display","fontSize","margin","cursor","width","SaveLoadButtonStyle","height","FilterSection","observer","useState","expandedFilters","setExpandedFilters","filterState","getFilterState","Menu","Item","Accordion","Title","active","content","onClick","newExpandedFilters","Content","Form","Group","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","className","style","element","resetValue","fluid","as","vertical","ResultItem","styled","ResultItemHeader","Header","ResultItemContent","ResultItemExtra","Extra","ResultCollection","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","Button","basic","icon","setCompleted","newWindow","window","open","opener","openInNewTab","Icon","CourseResultCollectionView","divided","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","e","activePage","ProgramResultView","onMouseEnter","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultView","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","div","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Fragment","Container","Input","placeholder","loading","link","setQueryText","setInputActive","onChange","shouldShowPanel","pointing","secondary","marginRight","Dropdown","text","selection","options","setResultsPerPage","isPrerequisiteOfCurrentDraggable","hasErrors","horizontal","tooltipStyle","CourseView","droppableIndex","prerequisitesOfCurrentDraggable","allocatedPeriod","output","formatTermOffering","errorList","errors","missingFormatted","regex","replace","formatErrors","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Tooltip","aria-label","aria-multiline","arrow","h3","CourseList","isDraggingOver","isValidDroppable","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","TermView","isPossibleTerm","_term","equals","totalUoc","reduce","droppableId","direction","droppableProps","YearView","YearPlanner","Planner","plannerViewModel","onBeforeCapture","onDragStart","initial","getFlattenedPrerequisiteList","onDragEnd","destination","source","sourceGroup","destinationGroup","CurriculumElementsView","applicationContext","useContext","curriculumElements","isCourse","isSpecialisation","getSpecialisationById","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","key","isContainerActive","parse","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionState","_courseState","_progressionPlannerState","displayableContainerPanels","programs","specialisations","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","allocatedCourses","dictKey","list","UploadButton","inputRef","useRef","setcompletedorPlanned","course_upload","assignCourtoTerm","uploaded","assignCourseToTermHard","current","click","file","target","files","reader","FileReader","setAllUnplanned","onload","JSON","Programs","Program","Specialisations","Specialisation","readAsText","handleFileUpload","accept","Save","data_save","converttojson","filename","currentdate","getDate","getMonth","getHours","getMinutes","getSeconds","getcurrentdatetime","FileSaver","require","blob","Blob","stringify","saveAs","App","autoPlannerModel","Provider","defaultSize","primary","ProgressionPlanner","autoPlan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0f1242f.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n    UNPLANNED,\n    PLANNED,\n    ALLOCATED,\n    COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity {\n    allocatedTerm: TermModel | undefined = undefined;\n    public readonly id: string\n    public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n    private _errors: Set<IError> = new Set<IError>()\n\n    constructor(\n        public readonly code: string,\n        public readonly contentTypeLabel: string,\n        public readonly corequisites: string[],\n        public readonly creditPoints: number,\n        public readonly description: string,\n        public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n        public readonly enrolmentRules: string[],\n        public readonly exclusion: string[],\n        public readonly facultyName: string,\n        public readonly implementationYear: number,\n        public readonly keywords: string[],\n        public readonly prerequisites: ConditionalTree,\n        public readonly schoolName: string,\n        public readonly studyLevel: string,\n        public readonly termOffering: string[],\n        public readonly title: string,\n        public readonly urlMap: string,\n    ) {\n        this.id = code;\n        makeAutoObservable(this)\n    }\n\n    setAllocated(term: TermModel) {\n        this.courseStatus = CourseStatus.ALLOCATED\n        this.allocatedTerm = term\n    }\n\n    setUnplanned() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.UNPLANNED\n        this.allocatedTerm = undefined\n    }\n\n    setCompleted() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.COMPLETED\n        this.allocatedTerm = undefined\n    }\n\n    setPlanned() {\n        this.courseStatus = CourseStatus.PLANNED\n        this.allocatedTerm = undefined\n    }\n\n    // IValidatableEntity\n    addError(error: IError) {\n        this._errors.add(error)\n    }\n\n    removeError (error: IError) {\n        this._errors.delete(error)\n    }\n\n    hasErrors(): boolean {\n        return this._errors.size > 0\n    }\n\n    clearErrors() {\n        this._errors.clear()\n    }\n\n    get errors(): IError[] {\n        return [...this._errors]\n    }\n\n    toString() {\n        return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n    }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//     return db.collection(\"courses\")\n//         .doc(courseCode)!\n//         .withConverter(courseConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var course = doc.data()!;\n\n//                 return course;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let courseConverter = {\n//     toFirestore: function (course) {\n//         return {\n//             name: course.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n//         let effectiveDate = new Date(data.effectiveDate);\n\n//         return new CourseModel(\n//             data.code,\n//             data.contentTypeLabel,\n//             data.corequisites,\n//             Number(data.creditPoints),\n//             data.description,\n//             effectiveDate,\n//             data.enrolmentRules,\n//             data.exclusion,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.prerequisites,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.termOffering,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\n\nexport class TermModel {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this)\n        this.year = year\n        this.name = name\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n\nexport default {}","import { autorun, computed, makeAutoObservable, makeObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { autorun, makeAutoObservable, reaction, runInAction, transaction } from \"mobx\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { TermModel } from \"../models/TermModel\";\nimport { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser'\nimport { getCourseValidations } from \"../models/Validations/Validations\";\n\nexport class CourseState {\n  constructor() {\n    // makeAutoObservable(this)\n    makeAutoObservable<\n      CourseState,\n      \"coursesMapById\"\n      | \"coursesMapByActiveStatus\"\n    >(this)\n\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n\n    this.loadAllCourses()\n      .then(() => {\n        // this.getCourseById(\"COMP1511\")?.setCompleted()\n\n        this.getCourseById(\"COMP1521\")?.setPlanned()\n\n        this.getCourseById(\"COMP3231\")?.setPlanned()\n        let COMP9444 = this.getCourseById(\"COMP9444\")\n        if (COMP9444) {\n          this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n        }\n        let MATH1081 = this.getCourseById(\"MATH1081\")\n        if (MATH1081) {\n          this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n        }\n        let COMP2041 = this.getCourseById(\"COMP2041\")\n        if (COMP2041) {\n          this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n        }\n        let COMP9417 = this.getCourseById(\"COMP9417\")\n        if (COMP9417) {\n          this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n        }\n        let MATH1231 = this.getCourseById(\"MATH1231\")\n        if (MATH1231) {\n          this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n        }\n      })\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  async loadAllCourses() {\n    return fetch(new Request(\n      \"https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/undergraduate/all_courses.json\",\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          jsonData.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n      });\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses() {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  setAllUnplanned() {\n    this.allCourses.map((course) => {\n      this.coursesMapById.get(course.code)?.setUnplanned();\n      return course;\n    })\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if(typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n              || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if(typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        const x = course\n        ? course.courseStatus !== CourseStatus.UNPLANNED\n        : false\n        console.log(`${courseCode}: ${x}`)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]) : boolean { \n    for (let i = 0; i < termOffering.length; i++) {\n      if(term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  assignCourseToTermHard(course: CourseModel, term: TermModel): boolean {\n    course.setAllocated(term)\n    return true\n  }\n  // setCourseAllocated(code: string, allocatedYear: number, allocatedTermName: string) {\n  //   let course: CourseModel = this.courseMap[code]\n  //   if (!course) {\n  //     console.log(\"does not exist\")\n  //     return\n  //   }\n  //   course.setAllocated(new TermModel(allocatedYear, allocatedTermName))\n  // }\n}\n","import { ErrorCode, IValidatableEntity } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    let elementList: CurriculumElement[] = [];\n    \n    childrenData.forEach(function (data) {\n        let childContainerList: CurriculumContainer[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach(function (data) {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\n\nexport class ProgramModel implements IProgram, IProgressionEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { makeAutoObservable, toJS, transaction } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus } from \"../interfaces/ModelInterfaces\";\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\n\nexport class ProgressionState {\n  constructor() {\n    makeAutoObservable<\n      ProgressionState,\n      \"_programMapById\"\n      | \"_specialisationMapById\"\n    >(this)\n\n    this.loadAllPrograms()\n      .then(() => {\n        // this._programMapById.get(\"3586\")?.setPlanned()\n        // this._programMapById.get(\"3589\")?.setPlanned()\n      });\n    this.loadAllSpecialisations()\n      .then(() => {\n        // console.log(toJS(this._specialisationMapById.get(\"COMPI1\")))\n        // this._specialisationMapById.get(\"COMPI1\")?.setPlanned()\n      });\n  }\n\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  private loadAllPrograms() {\n    return fetch(new Request(\n      \"https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/undergraduate/all_programs.json\",\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          jsonData.forEach(programObj => {\n            let program = new ProgramModel(\n              programObj.code,\n              programObj.title,\n              programObj.academicItemType,\n              programObj.additionalInfo,\n              programObj.creditPoints,\n              parseCurriculumContainers(programObj.curriculumStructure),\n              programObj.description,\n              programObj.facultyName,\n              programObj.implementationYear,\n              programObj.intakePeriod,\n              programObj.programConstraints,\n              programObj.schoolName,\n              programObj.studyLevel,\n              programObj.urlMap\n            )\n\n            this.addProgram(program);\n          })\n        })\n      });\n  }\n\n  private loadAllSpecialisations() {\n    return fetch(new Request(\n      \"https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/undergraduate/all_specialisations.json\",\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          jsonData.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n      });\n  }\n}\n\n","import { computed, makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  private courseState: CourseState\r\n  private progressionState: ProgressionState\r\n  constructor(\r\n    courseState: CourseState,\r\n    progressionState: ProgressionState,\r\n  ) {\r\n    makeAutoObservable<SearchDataState,\r\n      \"courseState\"\r\n    >(this);\r\n    this.courseState = courseState\r\n    this.progressionState = progressionState\r\n  }\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this.courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this.progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this.progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\n\nconst courseState = new CourseState();\nconst progressionState = new ProgressionState();\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","import { action, computed, makeAutoObservable, makeObservable, observable, observe } from \"mobx\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\n\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport const getCourseGroupById = (plannerState: IPlannerState, groupId: string) => {\n  if (plannerState.completedGroup.id === groupId) {\n    return plannerState.completedGroup\n  } else if (plannerState.plannedGroup.id === groupId) {\n    return plannerState.plannedGroup\n  } else {\n    return plannerState.allocatedGroups.find(group => group.id === groupId)\n  }\n}\n\nexport class PlannerViewModel {\n  private courseState: CourseState\n  private plannerState: IPlannerState\n\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      synchronizePlannerState: false,\n      getCourseState: computed,\n      getPlannerState: computed,\n      setCurrentDraggableProps: action,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action\n    })\n\n    // TODO: use this\n    // makeAutoObservable<PlannerViewModel,\n    //   \"_currentDraggableProps\"\n    // >(this, {\n    //   _currentDraggableProps: observable,\n    //   synchronizePlannerState: false,\n    // })\n\n    this.courseState = courseState\n    this.plannerState = {\n      id:\"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]) {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  getDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this.courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      // console.log(maxAllocatedYear)\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState() {\n    const displayableTerms = this.getDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this.plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this.plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      // console.log(`Synchronizing term ${courseGroup.title}`)\n      this.synchronizeCourseList(this.courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this.courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this.courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this.courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this.plannerState = newPlannerState\n  }\n\n  get getCourseState() {\n    return this.courseState\n  }\n\n  get getPlannerState(): IPlannerState {\n    this.synchronizePlannerState()\n \n    return this.plannerState\n  }\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  setCurrentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return {...this._currentDraggableProps}\n  }\n\n  clearCurrentDraggableProps() {\n    this.setCurrentDraggableProps({\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    })\n  }\n\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private possibleValues: Set<FilterValue> = new Set();\n  private selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable<FilterModel<T>,\n      \"possibleValues\"\n      | \"selectedValues\"\n    >(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this.possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this.selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this.selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this.possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this.possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this.selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this.possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this.selectedValues.has(value)) {\n      this.selectedValues.delete(value)\n    } else {\n      this.selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this.possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this.selectedValues.has(value)) {\n      this.selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}","export const AutoPlanButtonStyle = {\r\n    backgroundColor: \"#4CAF50\",\r\n    border: \"none\",\r\n    color: \"white\",\r\n    padding: \"15px 32px\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n    margin: \"4px 2px\",\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n}\r\n\r\n\r\nexport const SaveLoadButtonStyle = {\r\n    backgroundColor: \"#dcdcdc\",\r\n    border: \"none\",\r\n    color: \"black\",\r\n    padding: \"15px 32px\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n    margin: \"4px 2px\",\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n}\r\n","import { Observer, observer, PropTypes } from \"mobx-react\"\nimport { useEffect, useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel, FilterValue } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { SaveLoadButtonStyle } from '../../../config/autoPlanButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T, >(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {    \n    props.filters.map((filter) => {\n      filter.getFilterState(props.searchResults).map((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n            <button style={SaveLoadButtonStyle} onClick={()=> handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n            {\n              props.filters.map(filter => {\n                return <FilterSection\n                  searchResults={props.searchResults}\n                  filter={filter}\n                />\n              })\n            }\n          </Accordion>\n          \n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item, Reveal } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseResultView } from \"./CourseResultView\"\nimport { isCompositeComponent } from \"react-dom/test-utils\"\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid, Pagination } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid, Pagination } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React, { useState } from 'react'\nimport { Icon, Menu, Container, Input, Dropdown } from 'semantic-ui-react'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport styled from 'styled-components'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\ninterface ISearchState {\n  queryText: string,\n  loading: boolean,\n  resultsPerPage: number,\n}\n\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const [isInputActive, setIsInputActive] = useState(false)\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click on the search bar to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius:8px;\n    padding: 8px;\n    margin: 0px 2px 8px 2px;\n    background-color: ${props => (\n        props.isPrerequisiteOfCurrentDraggable\n        ? '#c5eafc'\n        : props.hasErrors()\n            ? '#f5bfc8'\n            : props.isDragging\n                ? 'lightgrey'\n                : 'white'\n        )\n    };\n    ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n    height: fit-content;\n    max-width: 350px;\n`\n\nconst tooltipStyle = {\n    fontSize: 13,\n}\n\ninterface ICourseViewProps {\n    droppableIndex: number\n    course: CourseModel\n    prerequisitesOfCurrentDraggable: Set<string>\n    horizontal?: boolean\n}\n\nconst CourseView = ({ droppableIndex, course, prerequisitesOfCurrentDraggable, horizontal }: ICourseViewProps) => {\n    let termOffering = formatTermOffering(course.termOffering, course.allocatedTerm);\n    let errorList: string[] = formatErrors(course.errors);\n\n    return (\n            <Draggable draggableId={course.code} index={droppableIndex}>\n                {((provided, snapshot) => (\n                    <Container\n                        horizontal={horizontal}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        isPrerequisiteOfCurrentDraggable={prerequisitesOfCurrentDraggable.has(course.id)}\n                        hasErrors={() => course.hasErrors()}\n                    >\n                        <Tooltip title={\n                            <span>\n                                <p style={tooltipStyle}>{termOffering}</p>\n                                <p style={tooltipStyle}>{errorList[0]}</p>\n                                <p style={tooltipStyle}>{errorList[1]}</p>\n                            </span>} \n                            aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n                        >\n                            <p> {course.code} - {course.title}</p>     \n                        </Tooltip>\n                    </Container>\n                ))}\n            </Draggable>\n    )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n    let output: string[] = [];\n    let missing: string[] = [];\n    let missingFormatted: string[] = [];\n    const regex = /<br\\/>/ig;\n\n    if (errors.length === 0) {\n        return [\"\"];\n    }\n\n    if (errors.length === 1) {\n        return [errors[0].message.replace(regex, \"\"), `${errors[0].missing}`];\n    }\n\n    for (let i = 0; i < errors.length; i++) {\n        output.push(errors[i].message.replace(regex, \"\"));\n        missing.push(errors[i].missing);\n    }\n\n    // Format missing arr for empty elements and remove from array before joining\n    for (let i = 0; i < errors.length; i++) {\n        if (missing[i] !== \"\") {\n            missingFormatted.push(missing[i]);\n        }\n    }\n\n    return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n    termOffering = termOffering.sort();\n    let output: string = termOffering.join(\", \");\n\n    output = `Term Offerings: ${output}`;\n\n    return output;\n}\n\nexport default CourseView\n","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    ${props => !props.horizontal? \"max-width: 350px;\" : \"\"}\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 0 0;\n    display: flex;\n    width: 200px;\n`;\n\nconst CourseList = styled.div`\n    padding: 6px;\n    min-height: 100px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n        (props.isDraggingOver\n            ? props.isValidDroppable ? '#8debb7' : '#ff99b0'\n            : props.isPossibleTermOfCurrentDraggable\n                ? '#cafae0'\n                :(props.courseID === \"completed\")\n                    ? '#edf2f4'\n                    : (props.courseID === \"planned\")\n                        ? '#edf2f4'\n                        : '#edf2f4'\n        )\n    };\n    flex-grow: 1;\n    display: flex;\n    flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n    flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n    align-content: flex-start;\n`;\n\n\n\nconst TermHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n    && {\n        margin: auto 0 auto 0;\n        height: fit-content;\n        vertical-align: middle;\n        white-space: nowrap;\n    }\n`\n\ninterface ITermViewProps {\n    id: string\n    title: string\n    courses: CourseModel[]\n    term: TermModel | null\n    currentDraggableProps: ICurrentDraggableProps\n    horizontal?: boolean\n}\n\nconst TermView = ({ id, title, courses, term, currentDraggableProps, horizontal}: ITermViewProps) => {\n    const isPossibleTerm = (term: TermModel | null): boolean => {\n        return currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n    }\n    const totalUoc = courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n    return (\n        <Container horizontal={horizontal}>\n            <TermHeader>\n                <Title>{title}</Title>\n                {\n                    term\n                    ? <UocLabel\n                        color={(totalUoc === 18 || courses.length === 3)\n                            ? \"green\"\n                            : totalUoc < 18\n                                ? \"orange\"\n                                : \"yellow\"\n                        }\n                        content={`${totalUoc} UOC`}\n                        size={\"small\"}\n                    />\n                    : <></>\n                }\n            </TermHeader>\n            <Droppable\n                droppableId={id}\n                direction={horizontal ? 'horizontal' : 'vertical'}\n            >\n                {\n                    (provided, snapshot) => (\n                        <CourseList\n                            horizontal\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            courseID={provided.droppableProps['data-rbd-droppable-id']}\n                            isPossibleTermOfCurrentDraggable={isPossibleTerm(term)}\n                            isValidDroppable={term === null || isPossibleTerm(term)}\n                        >\n                            {\n                                courses\n                                    ? courses.map((course, index) =>\n                                    <CourseView\n                                        horizontal={horizontal}\n                                        key={course.code}\n                                        course={course}\n                                        droppableIndex={index}\n                                        prerequisitesOfCurrentDraggable={currentDraggableProps.prerequisiteCourseIds}\n                                    />)\n                                    : undefined\n                            }\n                            {provided.placeholder}\n                        </CourseList>\n                    )\n                }\n            </Droppable>\n        </Container>\n    )\n}\nexport default TermView\n","\nimport React from 'react';\nimport styled from 'styled-components'\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\nimport TermView from '../TermView/TermView';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n    id: string,\n    title: string,\n    year: number\n    courseGroups: ICourseGroup[],\n    currentDraggableProps: ICurrentDraggableProps,\n}\n\nconst YearView = (props: IYearViewProps) => {\n    return (\n        <Container>\n            <Title>{props.year}</Title>\n            {\n              props.courseGroups.map(courseGroup => {\n                // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n                return (\n                  <TermView\n                    key={courseGroup.id}\n                    id={courseGroup.id}\n                    title={courseGroup.title}\n                    courses={courseGroup.courses}\n                    term={courseGroup.term}\n                    currentDraggableProps={props.currentDraggableProps}\n                  />\n                )\n              })\n            }\n        </Container>\n    )\n}\nexport default YearView\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult, ResponderProvided } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { getCourseGroupById, PlannerViewModel } from './PlannerViewModel';\nimport TermView from './TermView/TermView';\nimport YearView from './YearView/YearView';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      // trace(true)\n      // console.log(toJS(plannerViewModel.getPlannerState));\n      const courseState = plannerViewModel.getCourseState;\n      const plannerState = plannerViewModel.getPlannerState;\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n          return\n        }\n        const course = courseState.getCourseById(draggableId)\n        if (!course || !source || !destination) {\n          return\n        }\n\n        const sourceGroup = getCourseGroupById(plannerState, source.droppableId)\n        const destinationGroup = getCourseGroupById(plannerState, destination.droppableId)\n\n        sourceGroup?.courses.splice(source.index, 1)\n        destinationGroup?.courses.splice(destination.index, 0, course)\n\n        if (destination.droppableId !== source.droppableId) {\n          if (destination.droppableId === \"trash\") {\n            course.setUnplanned()\n          } else\n          if (destination.droppableId === \"completed\") {\n            course.setCompleted()\n          } else if (destination.droppableId === \"planned\") {\n            course.setPlanned()\n          } else {\n            course.setAllocated(TermModel.fromMappingName(destination.droppableId))\n          }\n        }\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n        // console.log(course)\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.setCurrentDraggableProps({\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        })\n      }\n\n      const onDragStart = (initial: DragStart, provided: ResponderProvided) => {\n        const course = courseState.getCourseById(initial.draggableId)\n        if (course) {\n          plannerViewModel.setCurrentDraggableProps({\n            ...plannerViewModel.currentDraggableProps,\n            possibleTerms: plannerViewModel.getDisplayableTerms().filter(term => {\n              return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n            }),\n            prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n          })\n        }\n      }\n\n      return (\n        <React.Fragment>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <TermView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n              />\n            }\n            <Container>\n              {\n                <TermView\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  courses={plannerState.plannedGroup.courses}\n                  term={null}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n              }\n              <YearPlanner>\n              {\n                plannerState.yearGroups.map(yearGroup => {\n                  return <YearView\n                    id={yearGroup.id}\n                    title={yearGroup.title}\n                    year={yearGroup.year}\n                    courseGroups={yearGroup.courseGroups}\n                    currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  />\n                })\n              }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ? \n                <TermView\n                  horizontal={true}\n                  key=\"trash\"\n                  id=\"trash\"\n                  title=\"Remove\"\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default Planner;\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from \"mobx-react\";\nimport { Accordion, AccordionTitle, Icon, Label } from \"semantic-ui-react\";\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\nimport styled from 'styled-components'\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport React, { useState } from \"react\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"javascript:void(0);\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport { Accordion, Button, Container } from 'semantic-ui-react';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport styled from 'styled-components'\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport { Accordion, Container } from 'semantic-ui-react';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport styled from 'styled-components'\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { computed, makeAutoObservable, makeObservable } from \"mobx\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeAutoObservable<ProgressionPlannerViewModel,\n      \"displayableContainerPanels\"\n    >(this)\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    let totalUoc = 0\n    curriculumContainer.elements.forEach(element => {\n      if(element.isCourse()) {\n        if (this._courseState.getCourseById(element.itemCode)?.courseStatus !== CourseStatus.UNPLANNED) {\n          totalUoc += element.creditPoints\n        }\n      } else if(element.isSpecialisation()) {\n        if (this.progressionState.getSpecialisationById(element.itemCode)?.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          totalUoc += element.creditPoints\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      totalUoc += this.calculateUocOfChildren(container)\n    })\n    return totalUoc\n  }\n\n  // setContainerActive(containerId: string) {\n  //   this.displayableContainerPanels.add(containerId)\n  // }\n\n  // setContainerInactive(containerId: string) {\n  //   this.displayableContainerPanels.delete(containerId)\n  // }\n\n  toggleContainer(containerId: string) {\n    if (this.displayableContainerPanels.has(containerId)) {\n      this.displayableContainerPanels.delete(containerId)\n    } else {\n      this.displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this.displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this.displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this.displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this.displayableContainerPanels.has(containerId)\n  }\n}\n","import { computed, makeObservable, toJS } from \"mobx\";\r\nimport { CourseState } from \"../states/CourseState\";\r\nimport { CourseModel } from \"./CourseModel\";\r\nimport { TermModel } from \"./TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Summer Term\", \"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import React, {useRef } from \"react\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { SaveLoadButtonStyle} from \"../../config/autoPlanButtonStyle\";\n\nconst UploadButton = ({courseState, progressionState}) => {\n\n    const inputRef = useRef(null);\n\n    const handleFileUpload = (e) => {\n        const file = e.target.files[0];\n        let reader = new FileReader();\n        courseState.setAllUnplanned();\n        reader.onload = (e) => {\n            const json = JSON.parse(e.target.result);\n            json.courseState.map((course) => {\n                if (course.courseStatus !== 2) {\n                    setcompletedorPlanned(course);\n                } else if (course.courseStatus === 2) {\n                    assignCourtoTerm(course);\n                }\n            })\n\n            json.Programs.map((Program) => {\n                progressionState._programMapById.get(Program.code)?.setPlanned()\n            })\n\n            json.Specialisations.map((Specialisation) => {\n                progressionState._specialisationMapById.get(Specialisation.code)?.setPlanned()\n            })\n\n        }\n\t\treader.readAsText(file);\n        e.target.value = null;\n\n    };\n\n    const setcompletedorPlanned = (course_upload) => {\n        if (course_upload.courseStatus === 1) {\n            courseState.getCourseById(course_upload.code)?.setPlanned()\n        }\n        if (course_upload.courseStatus === 3) {\n            courseState.getCourseById(course_upload.code)?.setCompleted()\n        }\n    }\n\n    const assignCourtoTerm = (course_upload) => {\n        let uploaded = courseState.getCourseById(course_upload.code)\n        if (uploaded) {\n            courseState.assignCourseToTermHard(uploaded, new TermModel( course_upload.allocatedTerm.year, course_upload.allocatedTerm.name))\n        }\n        \n    }\n    \n    return (\n        <React.Fragment>\n            <button \n                onClick={() => inputRef.current.click()}\n                style={SaveLoadButtonStyle} >\n                Upload\n            </button>\n            <input\n                ref={inputRef}\n                onChange={(e) => handleFileUpload(e)}\n                type=\"file\"\n                style={{ display: \"none\" }}\n                accept=\"application/JSON\"\n            />\n\n        </React.Fragment>\n    );\n\n\n       \n\n\n}\n\n\nexport default UploadButton","\nimport UploadButton from './UploadButton'\nimport { SaveLoadButtonStyle } from '../../config/autoPlanButtonStyle'\nimport { CourseStatus } from '../../models/CourseModel'\nimport './SaveLoad.css'\n\nconst Save = ({courseState, progressionState}) => {\n\n    const converttojson = () => {\n        console.log(progressionState.plannedPrograms);\n        // console.log(progressionState.plannedPrograms());\n\n        var data = {courseState:[], Programs:[], Specialisations:[]}\n        courseState.completedCourses.map((course) => {\n            data.courseState.push(course)\n        })\n\n        courseState.plannedCourses.map((course) => {\n            data.courseState.push(course)\n        })\n\n        courseState.termCourseMap.forEach(element => {\n           element.map((course) => {\n            data.courseState.push(course)\n           })\n        });\n\n        progressionState.plannedPrograms.map((Program) => {\n            data.Programs.push(Program)\n        })\n\n        progressionState.plannedSpecialisations.map((Specialisation) => {\n            data.Specialisations.push(Specialisation)\n        })\n\n        return data\n    }\n\n    const getcurrentdatetime =()=> {\n        var currentdate = new Date(); \n        var datetime = \"compsigh_\" + currentdate.getDate() + \"/\"\n                + (currentdate.getMonth()+1)  + \"/\" \n                + currentdate.getFullYear() + \" @ \"  \n                + currentdate.getHours() + \":\"  \n                + currentdate.getMinutes() + \":\" \n                + currentdate.getSeconds();\n\n        return datetime\n    }\n\n    const handlesave =()=> {\n        const data_save = converttojson()\n        const filename = getcurrentdatetime();\n        var FileSaver = require('file-saver');\n        var blob = new Blob([JSON.stringify(data_save)], {type: \"text/plain;charset=utf-8\"});\n        FileSaver.saveAs(blob, filename+\".json\");\n    }\n    return (\n        <>\n            <div className=\"savestyle\">\n                <button style={SaveLoadButtonStyle} onClick={handlesave}>\n                    Save\n                </button>\n            </div>\n            <div className=\"uploadstyle\">\n                <UploadButton courseState={courseState}  progressionState={progressionState}/>\n            </div>\n        </>\n    )\n}\n\nexport default Save\n","import React, { useContext } from 'react';\nimport './App.css';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react'\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport Planner from './containers/Planner/Planner';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport { Observer } from 'mobx-react-lite';\nimport \"fomantic-ui-css/semantic.min.css\";\nimport { Container } from 'semantic-ui-react';\nimport { AutoPlannerViewModel } from './models/AutoPlannerModel';\nimport { AutoPlanButtonStyle } from './config/autoPlanButtonStyle';\nimport Save from './components/load/Save';\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const autoPlannerModel = new AutoPlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        {/* <Header /> */}\n        <div className=\"ui container\">\n          <SplitPane\n            split=\"vertical\"\n            defaultSize={\"min(50vw, 1000px)\"}\n            primary=\"second\"\n          >\n            <Container style={{ padding: 10 }} fluid>\n              <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n              <Observer>\n                {\n                  () => {\n                    return (\n                      !searchPanelViewModel.shouldShowPanel\n                        ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                        : <></>\n                    )\n                  }\n                }\n              </Observer>\n            </Container>\n            <Container style={{ padding: 10 }} fluid>\n              {/* @ts-ignore */}\n              <Save courseState={applicationContext.courseState} progressionState={applicationContext.progressionState}/>\n              <button type=\"button\" style={AutoPlanButtonStyle} onClick={() => {autoPlannerModel.autoPlan()}}>Auto Plan Degree</button>\n              <Planner plannerViewModel={plannerViewModel} />\n            </Container>\n          </SplitPane>\n        </div>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}