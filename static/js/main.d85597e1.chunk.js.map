{"version":3,"sources":["interfaces/ModelInterfaces.ts","config/autoPlanButtonStyle.ts","models/TermModel.ts","components/load/UploadButton.js","components/load/Save.js","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","containers/SearchPanel/SearchPanelViewModel.tsx","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","contexts/ApplicationContext.ts","states/UserState.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","models/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","AutoPlanButtonStyle","backgroundColor","border","color","padding","textDecoration","display","fontSize","margin","cursor","width","SaveLoadButtonStyle","height","TermModel","year","name","makeAutoObservable","this","mappingName","parseInt","split","update","obj","term","tryGetTermNumber","UploadButton","courseState","progressionState","inputRef","useRef","setcompletedorPlanned","course_upload","courseStatus","getCourseById","code","setPlanned","setCompleted","assignCourtoTerm","uploaded","assignCourseToTermHard","allocatedTerm","Fragment","onClick","current","click","style","ref","onChange","e","file","target","files","reader","FileReader","setAllUnplanned","onload","json","JSON","parse","result","forEach","course","Programs","Program","_programMapById","get","Specialisations","Specialisation","_specialisationMapById","readAsText","value","handleFileUpload","type","accept","Save","className","data_save","data","completedCourses","push","plannedCourses","termCourseMap","element","plannedPrograms","plannedSpecialisations","converttojson","filename","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getcurrentdatetime","FileSaver","require","blob","Blob","stringify","saveAs","MenuBarView","styled","Menu","MenuBar","observer","props","useState","undefined","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","active","userState","studyLevel","UNDERGRADUATE","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","Container","div","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","horizontal","tooltipStyle","CourseView","CourseStatus","droppableIndex","prerequisitesOfCurrentDraggable","termOffering","allocatedPeriod","output","sort","join","formatTermOffering","errorList","errors","missing","missingFormatted","regex","length","message","replace","i","formatErrors","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","has","id","Tooltip","title","aria-label","aria-multiline","arrow","Title","h3","CourseList","isDraggingOver","isValidDroppable","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","courses","currentDraggableProps","isPossibleTerm","possibleTerms","filter","_term","equals","totalUoc","map","creditPoints","reduce","a","b","content","droppableId","direction","droppableProps","prerequisiteCourseIds","placeholder","YearView","courseGroups","courseGroup","YearPlanner","Planner","plannerViewModel","plannerState","onBeforeCapture","onDragStart","initial","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","Set","getFlattenedPrerequisiteList","prerequisites","onDragEnd","destination","source","sourceGroup","getCourseGroupById","destinationGroup","splice","setUnplanned","setAllocated","fromMappingName","synchronizePlannerState","clearCurrentDraggableProps","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","indexOf","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","uniqueYears","getMappingName","getFullName","find","group","newPlannerState","toString","synchronizeCourseList","groupId","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","schoolName","urlMap","UNPLANNED","_errors","ALLOCATED","clear","COMPLETED","PLANNED","error","add","delete","CourseState","_userState","validations","includes","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","Map","coursesMapByActiveStatus","reaction","_updateStudyLevel","fireImmediately","values","set","fetch","Request","method","mode","cache","then","response","jsonData","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","uniqueTerms","keys","maxYear","slice","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","allCourses","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","curriculumStructure","intakePeriod","programConstraints","progressionStatus","SpecialisationModel","ProgressionState","loadAllPrograms","loadAllSpecialisations","allPrograms","program","allSpecialisations","specialisation","concat","programObj","addProgram","specialisationObj","addSpecialisation","SearchDataState","_progressionState","_studyLevel","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","basic","icon","newWindow","window","opener","openInNewTab","Icon","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","isCourse","isSpecialisation","getSpecialisationById","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","key","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","programs","specialisations","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","console","log","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","resetValue","as","vertical","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","secondary","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","assignCourseToTerm","allocatedCourses","dictKey","list","App","autoPlannerModel","Provider","defaultSize","primary","ProgressionPlanner","autoPlan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d85597e1.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","export const AutoPlanButtonStyle = {\r\n    backgroundColor: \"#4CAF50\",\r\n    border: \"none\",\r\n    color: \"white\",\r\n    padding: \"15px 32px\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n    margin: \"4px 2px\",\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n}\r\n\r\n\r\nexport const SaveLoadButtonStyle = {\r\n    backgroundColor: \"#dcdcdc\",\r\n    border: \"none\",\r\n    color: \"black\",\r\n    padding: \"15px 32px\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n    margin: \"4px 2px\",\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\n\nexport class TermModel {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this)\n        this.year = year\n        this.name = name\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n}\n","import React, {useRef } from \"react\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { SaveLoadButtonStyle} from \"../../config/autoPlanButtonStyle\";\n\nconst UploadButton = ({courseState, progressionState}) => {\n\n    const inputRef = useRef(null);\n\n    const handleFileUpload = (e) => {\n        const file = e.target.files[0];\n        let reader = new FileReader();\n        courseState.setAllUnplanned();\n        reader.onload = (e) => {\n            const json = JSON.parse(e.target.result);\n            json.courseState.forEach((course) => {\n                if (course.courseStatus !== 2) {\n                    setcompletedorPlanned(course);\n                } else if (course.courseStatus === 2) {\n                    assignCourtoTerm(course);\n                }\n            })\n\n            json.Programs.forEach((Program) => {\n                progressionState._programMapById.get(Program.code)?.setPlanned()\n            })\n\n            json.Specialisations.forEach((Specialisation) => {\n                progressionState._specialisationMapById.get(Specialisation.code)?.setPlanned()\n            })\n\n        }\n\t\treader.readAsText(file);\n        e.target.value = null;\n\n    };\n\n    const setcompletedorPlanned = (course_upload) => {\n        if (course_upload.courseStatus === 1) {\n            courseState.getCourseById(course_upload.code)?.setPlanned()\n        }\n        if (course_upload.courseStatus === 3) {\n            courseState.getCourseById(course_upload.code)?.setCompleted()\n        }\n    }\n\n    const assignCourtoTerm = (course_upload) => {\n        let uploaded = courseState.getCourseById(course_upload.code)\n        if (uploaded) {\n            courseState.assignCourseToTermHard(uploaded, new TermModel( course_upload.allocatedTerm.year, course_upload.allocatedTerm.name))\n        }\n        \n    }\n    \n    return (\n        <React.Fragment>\n            <button \n                onClick={() => inputRef.current.click()}\n                style={SaveLoadButtonStyle} >\n                Upload\n            </button>\n            <input\n                ref={inputRef}\n                onChange={(e) => handleFileUpload(e)}\n                type=\"file\"\n                style={{ display: \"none\" }}\n                accept=\"application/JSON\"\n            />\n\n        </React.Fragment>\n    );\n\n\n       \n\n\n}\n\n\nexport default UploadButton","\nimport { SaveLoadButtonStyle } from '../../config/autoPlanButtonStyle'\nimport './SaveLoad.css'\nimport UploadButton from './UploadButton'\n\nconst Save = ({courseState, progressionState}) => {\n\n    const converttojson = () => {\n        // console.log(progressionState.plannedPrograms);\n        // console.log(progressionState.plannedPrograms());\n\n        var data = {courseState:[], Programs:[], Specialisations:[]}\n        courseState.completedCourses.forEach((course) => {\n            data.courseState.push(course)\n        })\n\n        courseState.plannedCourses.forEach((course) => {\n            data.courseState.push(course)\n        })\n\n        courseState.termCourseMap.forEach(element => {\n           element.forEach((course) => {\n            data.courseState.push(course)\n           })\n        });\n\n        progressionState.plannedPrograms.forEach((Program) => {\n            data.Programs.push(Program)\n        })\n\n        progressionState.plannedSpecialisations.forEach((Specialisation) => {\n            data.Specialisations.push(Specialisation)\n        })\n\n        return data\n    }\n\n    const getcurrentdatetime =()=> {\n        var currentdate = new Date(); \n        var datetime = \"compsigh_\" + currentdate.getDate() + \"/\"\n                + (currentdate.getMonth()+1)  + \"/\" \n                + currentdate.getFullYear() + \" @ \"  \n                + currentdate.getHours() + \":\"  \n                + currentdate.getMinutes() + \":\" \n                + currentdate.getSeconds();\n\n        return datetime\n    }\n\n    const handlesave =()=> {\n        const data_save = converttojson()\n        const filename = getcurrentdatetime();\n        var FileSaver = require('file-saver');\n        var blob = new Blob([JSON.stringify(data_save)], {type: \"text/plain;charset=utf-8\"});\n        FileSaver.saveAs(blob, filename+\".json\");\n    }\n    return (\n        <>\n            <div className=\"savestyle\">\n                <button style={SaveLoadButtonStyle} onClick={handlesave}>\n                    Save\n                </button>\n            </div>\n            <div className=\"uploadstyle\">\n                <UploadButton courseState={courseState}  progressionState={progressionState}/>\n            </div>\n        </>\n    )\n}\n\nexport default Save\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                ? setStudyLevelChangeAction(() => () => props.userState.studyLevel = StudyLevel.UNDERGRADUATE)\n                : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                ? setStudyLevelChangeAction(() => () => props.userState.studyLevel = StudyLevel.POSTGRADUATE)\n                : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                ? setStudyLevelChangeAction(() => () => props.userState.studyLevel = StudyLevel.RESEARCH)\n                : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius:8px;\n    padding: 8px;\n    margin: 0px 2px 8px 2px;\n    background-color: ${props => (\n        props.isPrerequisiteOfCurrentDraggable\n        ? '#c5eafc'\n        : props.hasErrors()\n            ? '#f5bfc8'\n            : props.isDragging\n                ? 'lightgrey'\n                : 'white'\n        )\n    };\n    ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n    height: fit-content;\n    max-width: 350px;\n`\n\nconst tooltipStyle = {\n    fontSize: 13,\n}\n\ninterface ICourseViewProps {\n    droppableIndex: number\n    course: CourseModel\n    prerequisitesOfCurrentDraggable: Set<string>\n    horizontal?: boolean\n}\n\nconst CourseView = ({ droppableIndex, course, prerequisitesOfCurrentDraggable, horizontal }: ICourseViewProps) => {\n    let termOffering = formatTermOffering(course.termOffering, course.allocatedTerm);\n    let errorList: string[] = formatErrors(course.errors);\n\n    return (\n            <Draggable draggableId={course.code} index={droppableIndex}>\n                {((provided, snapshot) => (\n                    <Container\n                        horizontal={horizontal}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        isPrerequisiteOfCurrentDraggable={prerequisitesOfCurrentDraggable.has(course.id)}\n                        hasErrors={() => course.hasErrors()}\n                    >\n                        <Tooltip title={\n                            <span>\n                                <p style={tooltipStyle}>{termOffering}</p>\n                                <p style={tooltipStyle}>{errorList[0]}</p>\n                                <p style={tooltipStyle}>{errorList[1]}</p>\n                            </span>} \n                            aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n                        >\n                            <p> {course.code} - {course.title}</p>     \n                        </Tooltip>\n                    </Container>\n                ))}\n            </Draggable>\n    )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n    let output: string[] = [];\n    let missing: string[] = [];\n    let missingFormatted: string[] = [];\n    const regex = /<br\\/>/ig;\n\n    if (errors.length === 0) {\n        return [\"\"];\n    }\n\n    if (errors.length === 1) {\n        return [errors[0].message.replace(regex, \"\"), `${errors[0].missing}`];\n    }\n\n    for (let i = 0; i < errors.length; i++) {\n        output.push(errors[i].message.replace(regex, \"\"));\n        missing.push(errors[i].missing);\n    }\n\n    // Format missing arr for empty elements and remove from array before joining\n    for (let i = 0; i < errors.length; i++) {\n        if (missing[i] !== \"\") {\n            missingFormatted.push(missing[i]);\n        }\n    }\n\n    return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n    termOffering = termOffering.sort();\n    let output: string = termOffering.join(\", \");\n\n    output = `Term Offerings: ${output}`;\n\n    return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n    UNPLANNED,\n    PLANNED,\n    ALLOCATED,\n    COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity {\n    allocatedTerm: TermModel | undefined = undefined;\n    public readonly id: string\n    public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n    private _errors: Set<IError> = new Set<IError>()\n\n    constructor(\n        public readonly code: string,\n        public readonly contentTypeLabel: string,\n        public readonly corequisites: string[],\n        public readonly creditPoints: number,\n        public readonly description: string,\n        public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n        public readonly enrolmentRules: string[],\n        public readonly exclusion: string[],\n        public readonly facultyName: string,\n        public readonly implementationYear: number,\n        public readonly keywords: string[],\n        public readonly prerequisites: ConditionalTree,\n        public readonly schoolName: string,\n        public readonly studyLevel: string,\n        public readonly termOffering: string[],\n        public readonly title: string,\n        public readonly urlMap: string,\n    ) {\n        this.id = code;\n        makeAutoObservable(this)\n    }\n\n    setAllocated(term: TermModel) {\n        this.courseStatus = CourseStatus.ALLOCATED\n        this.allocatedTerm = term\n    }\n\n    setUnplanned() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.UNPLANNED\n        this.allocatedTerm = undefined\n    }\n\n    setCompleted() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.COMPLETED\n        this.allocatedTerm = undefined\n    }\n\n    setPlanned() {\n        this.courseStatus = CourseStatus.PLANNED\n        this.allocatedTerm = undefined\n    }\n\n    //#region IValidatableEntity\n    addError(error: IError) {\n        this._errors.add(error)\n    }\n\n    removeError (error: IError) {\n        this._errors.delete(error)\n    }\n\n    hasErrors(): boolean {\n        return this._errors.size > 0\n    }\n\n    clearErrors() {\n        this._errors.clear()\n    }\n\n    get errors(): IError[] {\n        return [...this._errors]\n    }\n    //#endregion\n\n    toString() {\n        return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n    }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//     return db.collection(\"courses\")\n//         .doc(courseCode)!\n//         .withConverter(courseConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var course = doc.data()!;\n\n//                 return course;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let courseConverter = {\n//     toFirestore: function (course) {\n//         return {\n//             name: course.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n//         let effectiveDate = new Date(data.effectiveDate);\n\n//         return new CourseModel(\n//             data.code,\n//             data.contentTypeLabel,\n//             data.corequisites,\n//             Number(data.creditPoints),\n//             data.description,\n//             effectiveDate,\n//             data.enrolmentRules,\n//             data.exclusion,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.prerequisites,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.termOffering,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    ${props => !props.horizontal? \"max-width: 350px;\" : \"\"}\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 0 0;\n    display: flex;\n    width: 200px;\n`;\n\nconst CourseList = styled.div`\n    padding: 6px;\n    min-height: 100px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n        (props.isDraggingOver\n            ? props.isValidDroppable ? '#8debb7' : '#ff99b0'\n            : props.isPossibleTermOfCurrentDraggable\n                ? '#cafae0'\n                :(props.courseID === \"completed\")\n                    ? '#edf2f4'\n                    : (props.courseID === \"planned\")\n                        ? '#edf2f4'\n                        : '#edf2f4'\n        )\n    };\n    flex-grow: 1;\n    display: flex;\n    flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n    flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n    align-content: flex-start;\n`;\n\n\n\nconst TermHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n    && {\n        margin: auto 0 auto 0;\n        height: fit-content;\n        vertical-align: middle;\n        white-space: nowrap;\n    }\n`\n\ninterface ITermViewProps {\n    id: string\n    title: string\n    courses: CourseModel[]\n    term: TermModel | null\n    currentDraggableProps: ICurrentDraggableProps\n    horizontal?: boolean\n}\n\nconst CourseGroupView = ({ id, title, courses, term, currentDraggableProps, horizontal}: ITermViewProps) => {\n    const isPossibleTerm = (term: TermModel | null): boolean => {\n        return currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n    }\n    const totalUoc = courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n    return (\n        <Container horizontal={horizontal}>\n            <TermHeader>\n                <Title>{title}</Title>\n                {\n                    term\n                    ? <UocLabel\n                        color={(totalUoc === 18 || courses.length === 3)\n                            ? \"green\"\n                            : totalUoc < 18\n                                ? \"orange\"\n                                : \"yellow\"\n                        }\n                        content={`${totalUoc} UOC`}\n                        size={\"small\"}\n                    />\n                    : <></>\n                }\n            </TermHeader>\n            <Droppable\n                droppableId={id}\n                direction={horizontal ? 'horizontal' : 'vertical'}\n            >\n                {\n                    (provided, snapshot) => (\n                        <CourseList\n                            horizontal\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            courseID={provided.droppableProps['data-rbd-droppable-id']}\n                            isPossibleTermOfCurrentDraggable={isPossibleTerm(term)}\n                            isValidDroppable={term === null || isPossibleTerm(term)}\n                        >\n                            {\n                                courses\n                                    ? courses.map((course, index) =>\n                                    <CourseView\n                                        horizontal={horizontal}\n                                        key={course.code}\n                                        course={course}\n                                        droppableIndex={index}\n                                        prerequisitesOfCurrentDraggable={currentDraggableProps.prerequisiteCourseIds}\n                                    />)\n                                    : undefined\n                            }\n                            {provided.placeholder}\n                        </CourseList>\n                    )\n                }\n            </Droppable>\n        </Container>\n    )\n}\nexport default CourseGroupView\n","\nimport React from 'react';\nimport styled from 'styled-components';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n    id: string,\n    title: string,\n    year: number\n    courseGroups: ICourseGroup[],\n    currentDraggableProps: ICurrentDraggableProps,\n}\n\nconst YearView = (props: IYearViewProps) => {\n    return (\n        <Container>\n            <Title>{props.year}</Title>\n            {\n              props.courseGroups.map(courseGroup => {\n                // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n                return (\n                  <CourseGroupView\n                    key={courseGroup.id}\n                    id={courseGroup.id}\n                    title={courseGroup.title}\n                    courses={courseGroup.courses}\n                    term={courseGroup.term}\n                    currentDraggableProps={props.currentDraggableProps}\n                  />\n                )\n              })\n            }\n        </Container>\n    )\n}\nexport default YearView\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult, ResponderProvided } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n          return\n        }\n        const course = courseState.getCourseById(draggableId)\n        if (!course || !source || !destination) {\n          return\n        }\n\n        const sourceGroup = plannerViewModel.getCourseGroupById(source.droppableId)\n        const destinationGroup = plannerViewModel.getCourseGroupById(destination.droppableId)\n\n        sourceGroup?.courses.splice(source.index, 1)\n        destinationGroup?.courses.splice(destination.index, 0, course)\n\n        if (destination.droppableId !== source.droppableId) {\n          if (destination.droppableId === \"trash\") {\n            course.setUnplanned()\n          } else if (destination.droppableId === \"completed\") {\n            course.setCompleted()\n          } else if (destination.droppableId === \"planned\") {\n            course.setPlanned()\n          } else {\n            course.setAllocated(TermModel.fromMappingName(destination.droppableId))\n          }\n        }\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      const onDragStart = (initial: DragStart, provided: ResponderProvided) => {\n        const course = courseState.getCourseById(initial.draggableId)\n        if (course) {\n          plannerViewModel.currentDraggableProps = {\n            ...plannerViewModel.currentDraggableProps,\n            possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n              return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n            }),\n            prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n          }\n        }\n      }\n\n      return (\n        <React.Fragment>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  courses={plannerState.plannedGroup.courses}\n                  term={null}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n              }\n              <YearPlanner>\n              {\n                plannerState.yearGroups.map(yearGroup => {\n                  return <YearView\n                    id={yearGroup.id}\n                    title={yearGroup.title}\n                    year={yearGroup.year}\n                    courseGroups={yearGroup.courseGroups}\n                    currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  />\n                })\n              }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ? \n                <CourseGroupView\n                  horizontal={true}\n                  key=\"trash\"\n                  id=\"trash\"\n                  title=\"Remove\"\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id:\"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n  \n  get currentDraggableProps(): ICurrentDraggableProps {\n    return {...this._currentDraggableProps}\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { makeAutoObservable, reaction, transaction } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\n\nexport class CourseState {\n  constructor(\n    public _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    )\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._resetCourseMap()\n          jsonData.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n      });\n  }\n\n  _updateStudyLevel() {\n    return this._loadAllCourses(this._userState.studyLevel)\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses() {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  setAllUnplanned() {\n    this.allCourses.map((course) => {\n      this.coursesMapById.get(course.code)?.setUnplanned();\n      return course;\n    })\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  assignCourseToTermHard(course: CourseModel, term: TermModel): boolean {\n    course.setAllocated(term)\n    return true\n  }\n  // setCourseAllocated(code: string, allocatedYear: number, allocatedTermName: string) {\n  //   let course: CourseModel = this.courseMap[code]\n  //   if (!course) {\n  //     console.log(\"does not exist\")\n  //     return\n  //   }\n  //   course.setAllocated(new TermModel(allocatedYear, allocatedTermName))\n  // }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\n\nexport class ProgramModel implements IProgram, IProgressionEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { makeAutoObservable, reaction, transaction } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\n\nexport class ProgressionState {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n\n  private _updateStudyLevel() {\n    this.loadAllPrograms(this._userState.studyLevel)\n    this.loadAllSpecialisations(this._userState.studyLevel)\n  }\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  private loadAllPrograms(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._programMapById.clear()\n          jsonData.forEach(programObj => {\n            let program = new ProgramModel(\n              programObj.code,\n              programObj.title,\n              programObj.academicItemType,\n              programObj.additionalInfo,\n              programObj.creditPoints,\n              parseCurriculumContainers(programObj.curriculumStructure),\n              programObj.description,\n              programObj.facultyName,\n              programObj.implementationYear,\n              programObj.intakePeriod,\n              programObj.programConstraints,\n              programObj.schoolName,\n              programObj.studyLevel,\n              programObj.urlMap\n            )\n\n            this.addProgram(program);\n          })\n        })\n      });\n  }\n\n  private loadAllSpecialisations(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          jsonData.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n      });\n  }\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","import { makeAutoObservable } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\n\nexport class UserState {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  get studyLevel() {\n    return this._studyLevel\n  }\n  set studyLevel (studyLevel: StudyLevel) {\n    this._studyLevel = studyLevel\n  }\n}\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { SaveLoadButtonStyle } from '../../../config/autoPlanButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T, >(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {    \n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n            <button style={SaveLoadButtonStyle} onClick={()=> handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n            {\n              props.filters.map(filter => {\n                return <FilterSection\n                  searchResults={props.searchResults}\n                  filter={filter}\n                />\n              })\n            }\n          </Accordion>\n          \n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import { CourseState } from \"../states/CourseState\";\r\nimport { CourseModel } from \"./CourseModel\";\r\nimport { TermModel } from \"./TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport Save from './components/load/Save';\nimport { AutoPlanButtonStyle } from './config/autoPlanButtonStyle';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport { AutoPlannerViewModel } from './models/AutoPlannerModel';\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const autoPlannerModel = new AutoPlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10 }} fluid>\n            {/* @ts-ignore */}\n            <Save courseState={applicationContext.courseState} progressionState={applicationContext.progressionState} />\n            <button type=\"button\" style={AutoPlanButtonStyle} onClick={() => { autoPlannerModel.autoPlan() }}>Auto Plan Degree</button>\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}