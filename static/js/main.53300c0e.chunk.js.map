{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","config/autoPlanButtonStyle.ts","containers/MenuBar/MenuBar.tsx","models/TermModel.ts","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","containers/SearchPanel/SearchPanelViewModel.tsx","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","models/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","console","log","_version","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","forEach","serializable","key","serialize","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","file","target","files","reader","FileReader","onload","ev","a","result","undefined","json","parse","toString","user","values","deserialize","value","readAsText","AutoPlanButtonStyle","backgroundColor","border","color","padding","textDecoration","fontSize","margin","cursor","width","MenuBarView","Menu","MenuBar","observer","useState","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","name","active","studyLevel","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","TermModel","year","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","term","tryGetTermNumber","serializedTerm","Container","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","horizontal","tooltipStyle","CourseView","CourseStatus","droppableIndex","course","prerequisitesOfCurrentDraggable","termOffering","allocatedPeriod","output","sort","join","formatTermOffering","allocatedTerm","errorList","errors","missing","missingFormatted","regex","length","message","replace","i","push","formatErrors","draggableId","code","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","has","id","Tooltip","title","aria-label","aria-multiline","arrow","Title","h3","CourseList","isDraggingOver","isValidDroppable","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","courses","currentDraggableProps","isPossibleTerm","possibleTerms","filter","_term","equals","totalUoc","map","creditPoints","reduce","b","content","droppableId","direction","droppableProps","prerequisiteCourseIds","placeholder","YearView","courseGroups","courseGroup","YearPlanner","Planner","plannerViewModel","plannerState","onBeforeCapture","onDragStart","initial","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","Set","getFlattenedPrerequisiteList","prerequisites","onDragEnd","destination","source","sourceGroup","getCourseGroupById","destinationGroup","splice","setUnplanned","setCompleted","setPlanned","setAllocated","fromMappingName","synchronizePlannerState","clearCurrentDraggableProps","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","indexOf","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","find","group","newPlannerState","synchronizeCourseList","termCourseMap","get","plannedCourses","completedCourses","groupId","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","schoolName","urlMap","courseStatus","UNPLANNED","_errors","ALLOCATED","clear","COMPLETED","PLANNED","error","add","delete","status","period","termModel","termFromSerializedData","e","CourseState","_userState","validations","includes","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","reaction","_updateStudyLevel","fireImmediately","registerStudyLevelWait","when","fetch","Request","method","mode","cache","then","response","jsonData","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","uniqueTerms","keys","maxYear","slice","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","allCourses","concat","courseModel","resetHard","serializedCourseState","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","SpecialisationModel","specialisation","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","progression","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","programObj","addProgram","specialisationObj","addSpecialisation","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_waitStudyLevelCallbacks","Promise","resolve","_","callback","isUpdated","serializedUserState","level","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","basic","icon","newWindow","window","opener","openInNewTab","Icon","className","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","element","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","ResetButtonStyle","height","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","resetValue","as","vertical","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","secondary","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","allocatedCourses","dictKey","list","App","autoPlannerModel","localImportExportModel","Provider","defaultSize","ProgressionPlanner","autoPlan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53300c0e.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  deserialize(imported: TermtanglesSerialized): void {\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"user\", userState);\n    this._serializables.set(\"progression\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  export() {\n    const data = {};\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (!!ev.target?.result) {\n        const json: TermtanglesSerialized = JSON.parse(ev.target.result.toString());\n        if (json._version !== undefined && json.user !== undefined) {\n          for (const serializable of this._serializables.values()) {\n            await serializable.deserialize(json);\n          }\n        }\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","export const AutoPlanButtonStyle = {\r\n    backgroundColor: \"#4CAF50\",\r\n    border: \"none\",\r\n    color: \"white\",\r\n    padding: \"15px 32px\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n    margin: \"4px 2px\",\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n}\r\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm) {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius:8px;\n    padding: 8px;\n    margin: 0px 2px 8px 2px;\n    background-color: ${props => (\n        props.isPrerequisiteOfCurrentDraggable\n        ? '#c5eafc'\n        : props.hasErrors()\n            ? '#f5bfc8'\n            : props.isDragging\n                ? 'lightgrey'\n                : 'white'\n        )\n    };\n    ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n    height: fit-content;\n    max-width: 350px;\n`\n\nconst tooltipStyle = {\n    fontSize: 13,\n}\n\ninterface ICourseViewProps {\n    droppableIndex: number\n    course: CourseModel\n    prerequisitesOfCurrentDraggable: Set<string>\n    horizontal?: boolean\n}\n\nconst CourseView = ({ droppableIndex, course, prerequisitesOfCurrentDraggable, horizontal }: ICourseViewProps) => {\n    let termOffering = formatTermOffering(course.termOffering, course.allocatedTerm);\n    let errorList: string[] = formatErrors(course.errors);\n\n    return (\n            <Draggable draggableId={course.code} index={droppableIndex}>\n                {((provided, snapshot) => (\n                    <Container\n                        horizontal={horizontal}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        isPrerequisiteOfCurrentDraggable={prerequisitesOfCurrentDraggable.has(course.id)}\n                        hasErrors={() => course.hasErrors()}\n                    >\n                        <Tooltip title={\n                            <span>\n                                <p style={tooltipStyle}>{termOffering}</p>\n                                <p style={tooltipStyle}>{errorList[0]}</p>\n                                <p style={tooltipStyle}>{errorList[1]}</p>\n                            </span>} \n                            aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n                        >\n                            <p> {course.code} - {course.title}</p>     \n                        </Tooltip>\n                    </Container>\n                ))}\n            </Draggable>\n    )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n    let output: string[] = [];\n    let missing: string[] = [];\n    let missingFormatted: string[] = [];\n    const regex = /<br\\/>/ig;\n\n    if (errors.length === 0) {\n        return [\"\"];\n    }\n\n    if (errors.length === 1) {\n        return [errors[0].message.replace(regex, \"\"), `${errors[0].missing}`];\n    }\n\n    for (let i = 0; i < errors.length; i++) {\n        output.push(errors[i].message.replace(regex, \"\"));\n        missing.push(errors[i].missing);\n    }\n\n    // Format missing arr for empty elements and remove from array before joining\n    for (let i = 0; i < errors.length; i++) {\n        if (missing[i] !== \"\") {\n            missingFormatted.push(missing[i]);\n        }\n    }\n\n    return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n    termOffering = termOffering.sort();\n    let output: string = termOffering.join(\", \");\n\n    output = `Term Offerings: ${output}`;\n\n    return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n    UNPLANNED,\n    PLANNED,\n    ALLOCATED,\n    COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n    allocatedTerm: TermModel | undefined = undefined;\n    public readonly id: string\n    public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n    private _errors: Set<IError> = new Set<IError>()\n\n    constructor(\n        public readonly code: string,\n        public readonly contentTypeLabel: string,\n        public readonly corequisites: string[],\n        public readonly creditPoints: number,\n        public readonly description: string,\n        public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n        public readonly enrolmentRules: string[],\n        public readonly exclusion: string[],\n        public readonly facultyName: string,\n        public readonly implementationYear: number,\n        public readonly keywords: string[],\n        public readonly prerequisites: ConditionalTree,\n        public readonly schoolName: string,\n        public readonly studyLevel: string,\n        public readonly termOffering: string[],\n        public readonly title: string,\n        public readonly urlMap: string,\n    ) {\n        this.id = code;\n        makeAutoObservable(this)\n    }\n\n    setAllocated(term: TermModel) {\n        this.courseStatus = CourseStatus.ALLOCATED\n        this.allocatedTerm = term\n    }\n\n    setUnplanned() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.UNPLANNED\n        this.allocatedTerm = undefined\n    }\n\n    setCompleted() {\n        this._errors.clear()\n        this.courseStatus = CourseStatus.COMPLETED\n        this.allocatedTerm = undefined\n    }\n\n    setPlanned() {\n        this.courseStatus = CourseStatus.PLANNED\n        this.allocatedTerm = undefined\n    }\n\n    //#region IValidatableEntity\n    addError(error: IError) {\n        this._errors.add(error)\n    }\n\n    removeError (error: IError) {\n        this._errors.delete(error)\n    }\n\n    hasErrors(): boolean {\n        return this._errors.size > 0\n    }\n\n    clearErrors() {\n        this._errors.clear()\n    }\n\n    get errors(): IError[] {\n        return [...this._errors]\n    }\n    //#endregion\n\n    serialize(): SerializedCourse {\n        if (this.courseStatus !== CourseStatus.ALLOCATED) {\n            return {\n                id: this.id,\n                status: CourseStatus[this.courseStatus],\n            }\n        } else {\n            return {\n                id: this.id,\n                status: CourseStatus[this.courseStatus],\n                period: this.allocatedTerm?.serialize(),\n            }\n        }\n    }\n\n    deserialize(course: SerializedCourse) {\n        if (course.id !== this.id) {\n            console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n            return;\n        }\n\n        switch(course.status) {\n            case (CourseStatus[CourseStatus.PLANNED]): {\n                this.setPlanned();\n                break;\n            }\n            case (CourseStatus[CourseStatus.COMPLETED]): {\n                this.setCompleted();\n                break;\n            }\n            case (CourseStatus[CourseStatus.ALLOCATED]): {\n                if (!!course.period) {\n                    try {\n                        let termModel = TermModel.termFromSerializedData(course.period);\n                        this.setAllocated(termModel);\n                    } catch (e) {\n                        console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n                    }\n                    \n                } else {\n                    console.error(`ERROR: Allocated course status with no period ${course.id}`);\n                }\n                break;\n            }\n            default: {\n                console.error(`ERROR: ${course.status} is not a valid status`);\n            }\n        }\n    }\n\n    toString() {\n        return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n    }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//     return db.collection(\"courses\")\n//         .doc(courseCode)!\n//         .withConverter(courseConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var course = doc.data()!;\n\n//                 return course;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let courseConverter = {\n//     toFirestore: function (course) {\n//         return {\n//             name: course.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n//         let effectiveDate = new Date(data.effectiveDate);\n\n//         return new CourseModel(\n//             data.code,\n//             data.contentTypeLabel,\n//             data.corequisites,\n//             Number(data.creditPoints),\n//             data.description,\n//             effectiveDate,\n//             data.enrolmentRules,\n//             data.exclusion,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.prerequisites,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.termOffering,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    ${props => !props.horizontal? \"max-width: 350px;\" : \"\"}\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 0 0;\n    display: flex;\n    width: 200px;\n`;\n\nconst CourseList = styled.div`\n    padding: 6px;\n    min-height: 100px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n        (props.isDraggingOver\n            ? props.isValidDroppable ? '#8debb7' : '#ff99b0'\n            : props.isPossibleTermOfCurrentDraggable\n                ? '#cafae0'\n                :(props.courseID === \"completed\")\n                    ? '#edf2f4'\n                    : (props.courseID === \"planned\")\n                        ? '#edf2f4'\n                        : '#edf2f4'\n        )\n    };\n    flex-grow: 1;\n    display: flex;\n    flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n    flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n    align-content: flex-start;\n`;\n\n\n\nconst TermHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n    && {\n        margin: auto 0 auto 0;\n        height: fit-content;\n        vertical-align: middle;\n        white-space: nowrap;\n    }\n`\n\ninterface ITermViewProps {\n    id: string\n    title: string\n    courses: CourseModel[]\n    term: TermModel | null\n    currentDraggableProps: ICurrentDraggableProps\n    horizontal?: boolean\n}\n\nconst CourseGroupView = ({ id, title, courses, term, currentDraggableProps, horizontal}: ITermViewProps) => {\n    const isPossibleTerm = (term: TermModel | null): boolean => {\n        return currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n    }\n    const totalUoc = courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n    return (\n        <Container horizontal={horizontal}>\n            <TermHeader>\n                <Title>{title}</Title>\n                {\n                    term\n                    ? <UocLabel\n                        color={(totalUoc === 18 || courses.length === 3)\n                            ? \"green\"\n                            : totalUoc < 18\n                                ? \"orange\"\n                                : \"yellow\"\n                        }\n                        content={`${totalUoc} UOC`}\n                        size={\"small\"}\n                    />\n                    : <></>\n                }\n            </TermHeader>\n            <Droppable\n                droppableId={id}\n                direction={horizontal ? 'horizontal' : 'vertical'}\n            >\n                {\n                    (provided, snapshot) => (\n                        <CourseList\n                            horizontal\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            courseID={provided.droppableProps['data-rbd-droppable-id']}\n                            isPossibleTermOfCurrentDraggable={isPossibleTerm(term)}\n                            isValidDroppable={term === null || isPossibleTerm(term)}\n                        >\n                            {\n                                courses\n                                    ? courses.map((course, index) =>\n                                    <CourseView\n                                        horizontal={horizontal}\n                                        key={course.code}\n                                        course={course}\n                                        droppableIndex={index}\n                                        prerequisitesOfCurrentDraggable={currentDraggableProps.prerequisiteCourseIds}\n                                    />)\n                                    : undefined\n                            }\n                            {provided.placeholder}\n                        </CourseList>\n                    )\n                }\n            </Droppable>\n        </Container>\n    )\n}\nexport default CourseGroupView\n","\nimport React from 'react';\nimport styled from 'styled-components';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n    id: string,\n    title: string,\n    year: number\n    courseGroups: ICourseGroup[],\n    currentDraggableProps: ICurrentDraggableProps,\n}\n\nconst YearView = (props: IYearViewProps) => {\n    return (\n        <Container>\n            <Title>{props.year}</Title>\n            {\n              props.courseGroups.map(courseGroup => {\n                // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n                return (\n                  <CourseGroupView\n                    key={courseGroup.id}\n                    id={courseGroup.id}\n                    title={courseGroup.title}\n                    courses={courseGroup.courses}\n                    term={courseGroup.term}\n                    currentDraggableProps={props.currentDraggableProps}\n                  />\n                )\n              })\n            }\n        </Container>\n    )\n}\nexport default YearView\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult, ResponderProvided } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n          return\n        }\n        const course = courseState.getCourseById(draggableId)\n        if (!course || !source || !destination) {\n          return\n        }\n\n        const sourceGroup = plannerViewModel.getCourseGroupById(source.droppableId)\n        const destinationGroup = plannerViewModel.getCourseGroupById(destination.droppableId)\n\n        sourceGroup?.courses.splice(source.index, 1)\n        destinationGroup?.courses.splice(destination.index, 0, course)\n\n        if (destination.droppableId !== source.droppableId) {\n          if (destination.droppableId === \"trash\") {\n            course.setUnplanned()\n          } else if (destination.droppableId === \"completed\") {\n            course.setCompleted()\n          } else if (destination.droppableId === \"planned\") {\n            course.setPlanned()\n          } else {\n            course.setAllocated(TermModel.fromMappingName(destination.droppableId))\n          }\n        }\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      const onDragStart = (initial: DragStart, provided: ResponderProvided) => {\n        const course = courseState.getCourseById(initial.draggableId)\n        if (course) {\n          plannerViewModel.currentDraggableProps = {\n            ...plannerViewModel.currentDraggableProps,\n            possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n              return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n            }),\n            prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n          }\n        }\n      }\n\n      return (\n        <React.Fragment>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  courses={plannerState.plannedGroup.courses}\n                  term={null}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n              }\n              <YearPlanner>\n              {\n                plannerState.yearGroups.map(yearGroup => {\n                  return <YearView\n                    id={yearGroup.id}\n                    title={yearGroup.title}\n                    year={yearGroup.year}\n                    courseGroups={yearGroup.courseGroups}\n                    currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  />\n                })\n              }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ? \n                <CourseGroupView\n                  horizontal={true}\n                  key=\"trash\"\n                  id=\"trash\"\n                  title=\"Remove\"\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id:\"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n  \n  get currentDraggableProps(): ICurrentDraggableProps {\n    return {...this._currentDraggableProps}\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelWait(async () => {\n      await when(() => { return this._isUpdated; });\n    });\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._resetCourseMap()\n          jsonData.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n      });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses,\n                                   this.plannedCourses,\n                                   [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n    );\n    return {\n      courses: allCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  deserialize(json: TermtanglesSerialized) {\n    if (!json.courseState) return;\n\n    this.resetHard();\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) return;\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (!!courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  deserialize(program: SerializedProgram) {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();\n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelWait(async () => {\n     return when(() => { return this._isUpdated; });\n    });\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  private async _updateStudyLevel() {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  deserialize(json: TermtanglesSerialized) {\n    if (!json.progression) return;\n\n    this.resetHard();\n    const serializedProgressionState = json.progression;\n    if (!!serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (!!programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (!!serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (!!specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  \n  }\n\n  private async loadAllPrograms(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._programMapById.clear()\n          jsonData.forEach(programObj => {\n            let program = new ProgramModel(\n              programObj.code,\n              programObj.title,\n              programObj.academicItemType,\n              programObj.additionalInfo,\n              programObj.creditPoints,\n              programObj.structureSummary,\n              parseCurriculumContainers(programObj.curriculumStructure),\n              programObj.description,\n              programObj.facultyName,\n              programObj.implementationYear,\n              programObj.intakePeriod,\n              programObj.programConstraints,\n              programObj.schoolName,\n              programObj.studyLevel,\n              programObj.urlMap\n            )\n\n            this.addProgram(program);\n          })\n        })\n      });\n  }\n\n  private async loadAllSpecialisations(studyLevel: StudyLevel) {\n    return fetch(new Request(\n      `https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`,\n      {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'default',\n      }\n    ))\n      .then(response => response.json())\n      .then(jsonData => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          jsonData.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n      });\n  }\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _waitStudyLevelCallbacks: Function[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      return new Promise<void>(async (resolve, _) => {\n        for (const callback of this._waitStudyLevelCallbacks) {\n          await callback();\n        }\n        resolve();\n      });\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelWait(callback: Function) {\n    this._waitStudyLevelCallbacks.push(callback);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.user) return;\n\n    const serializedUserState = json.user;\n    if (!!serializedUserState.studyLevel) {\n      const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n      if (!!level) {\n        await this.setStudyLevel(level);\n      } else {\n        console.error(`ERROR: ${serializedUserState.studyLevel} is not a valid study level.`)\n      }\n    }\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import { CourseState } from \"../states/CourseState\";\r\nimport { CourseModel } from \"./CourseModel\";\r\nimport { TermModel } from \"./TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { AutoPlanButtonStyle } from './config/autoPlanButtonStyle';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport { AutoPlannerViewModel } from './models/AutoPlannerModel';\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const autoPlannerModel = new AutoPlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <button type=\"button\" style={AutoPlanButtonStyle} onClick={() => { autoPlannerModel.autoPlan() }}>Auto Plan Degree</button>\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}