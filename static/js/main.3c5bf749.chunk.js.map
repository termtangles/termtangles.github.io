{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","interfaces/SelectableInterfaces.ts","models/TermModel.ts","models/CourseModel.ts","models/Filters/FilterModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","components/ContextMenu/ContextMenuView.tsx","helpers/EventUtils.ts","components/RegionSelect/RegionSelectView.tsx","containers/Planner/components/Dragging/DraggingView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","ActionID","TermModel","year","name","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","term","tryGetTermNumber","serializedTerm","CourseStatus","ActionableMetaData","REMOVE_COURSE","icon","pluralName","PLAN_COURSE","COMPLETE_COURSE","CourseModel","code","contentTypeLabel","corequisites","creditPoints","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","termOffering","title","urlMap","allocatedTerm","undefined","id","courseStatus","UNPLANNED","_errors","Set","defaultSearching","searchableFields","ALLOCATED","clear","COMPLETED","PLANNED","actions","setUnplanned","setPlanned","setCompleted","add","delete","size","status","period","course","termModel","termFromSerializedData","setAllocated","e","weight","uoc","inDescription","faculty","school","inTitle","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","map","flat","filter","applyFilter","searchResults","results","values","filterValue","includes","length","isNumerical","isNaN","Number","sort","b","possibleFilterValue","filterElementName","numMatchingRecords","has","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","inStructureSummary","SpecialisationModel","specialisation","SearchPanelItem","SearchPanelViewModel","searchDataState","queryText","isLoading","resultsPerPage","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","FUZZY_THRESHOLD","reaction","courseSearchData","setIsLoading","filters","getCourseFilters","fireImmediately","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","delay","searchPrograms","searchSpecialisations","setOutput","searchData","sortFn","parsedQueryText","Object","keys","offsets","tokenize","fields","push","excludedKey","exclude","fuseFuzzySearcher","Fuse","shouldSort","threshold","useExtendedSearch","search","$and","text","join","runInAction","ResetButtonStyle","backgroundColor","border","color","padding","textDecoration","fontSize","margin","cursor","width","height","FilterSection","observer","useState","expandedFilters","setExpandedFilters","filterState","getFilterState","Menu","Item","Accordion","Title","active","content","newExpandedFilters","Content","Form","Group","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","className","element","resetValue","fluid","as","vertical","ResultItem","ResultItemHeader","Header","ResultItemContent","ResultItemExtra","Extra","ResultCollection","ResultsPagination","Pagination","FilterColumn","Grid","Column","ResultsColumn","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","Button","basic","url","newWindow","window","open","opener","openInNewTab","Icon","CourseResultCollectionView","divided","CourseSearchTab","activePageNumber","setActivePageNumber","columns","container","Row","searchPanelViewModel","slice","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","onMouseEnter","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultView","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Container","pointing","secondary","marginRight","Dropdown","selection","options","setResultsPerPage","MenuBarView","SearchPanelView","isActive","SearchInputItem","MenuBar","studyLevelChangeAction","setStudyLevelChangeAction","searchPanelActive","setSearchPanelActive","header","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","position","onOutsideClick","Input","iconPosition","placeholder","loading","onFocus","setQueryText","Modal","onClose","Actions","negative","positive","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","SelectionCount","UnselectableText","p","tooltipStyle","CourseView","allocatedPeriod","output","formatTermOffering","errorList","errors","missing","missingFormatted","regex","replace","i","formatErrors","useEffect","registerDraggableRef","draggableRef","draggableId","index","droppableIndex","provided","snapshot","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","onCourseClick","onContextMenu","onCourseContextMenu","data-draggable","isRegionSelecting","Tooltip","aria-label","aria-multiline","arrow","selectedCoursesCount","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","isPossibleTerm","currentDraggableProps","possibleTerms","_term","equals","totalUoc","courses","reduce","droppableId","direction","droppableProps","selectedCourses","draggingCourseId","prerequisiteCourseIds","YearView","courseGroups","courseGroup","ContextMenu","addEventListener","onWindowContextMenu","removeEventListener","contextRef","menuItems","setMenuItems","defaultPrevented","selectorViewModel","getSelected","useLanguagePlural","actionItems","selectable","getActions","prev","curr","entries","fnArray","action","fn","call","getContextMenuItems","preventDefault","getBoundingClientRect","left","clientX","top","clientY","right","bottom","setIsContextOpen","openContext","Popup","context","isContextOpen","items","onItemClick","wasToggleInSelectionGroupKeyUsed","navigator","platform","metaKey","ctrlKey","RegionSelect","onMouseDown","onMouseUp","isToggleSelectionKeyUsed","setIsToggleSelectionKeyUsed","draggableBoxesRef","wasInRegion","setWasInRegion","DragSelection","useSelectionContainer","onSelectionStart","setIsRegionSelecting","draggableItemsMap","previous","rect","onSelectionEnd","onSelectionChange","useCallback","box","draggableBox","alreadyInRegion","nowInRegion","boxesIntersect","prevSelected","prevSelectable","courseModel","onToggle","Dragging","plannerViewModel","onBeforeCapture","onDragStart","initial","setIsDragging","find","unselectAll","getCourseById","selected","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","selectedCourse","spliceByGroupId","clearCurrentDraggableProps","children","YearPlanner","Planner","plannerState","onWindowKeyDown","onDragEnter","onDragExit","draggableItemsRef","registerDraggable","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_reactionDisposers","_selected","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","allocatedGroups","synchronizePlannerState","state","reactionDisposer","prevStatus","indexOfSelectable","indexOf","newCourses","addRemoveReaction","splice","sourceDroppableId","destDroppableId","fromMappingName","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","_updateStudyLevel","registerStudyLevelUpdateActionCallback","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","maxYear","courseStatusEnum","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","relationships","parseCurriculumElements","relationData","relationshipList","relationshipObj","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","ApplicationContext","createContext","CurriculumElementsView","applicationContext","useContext","curriculumElements","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c5bf749.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import { SemanticICONS } from \"semantic-ui-react/dist/commonjs/generic\";\n\nexport interface IActionMetaData {\n  key: string,\n  icon: SemanticICONS,\n  name: string,\n  pluralName?: string,\n}\n\nexport enum ActionID {\n  REMOVE_COURSE,\n  PLAN_COURSE,\n  COMPLETE_COURSE,\n}\n\nexport type Actions = Map<ActionID, undefined | VoidFunction>;\n\nexport const ActionableMetaData = new Map<ActionID, IActionMetaData>([\n  [ActionID.REMOVE_COURSE, {\n    key: \"remove\",\n    icon: \"delete calendar\",\n    name: \"Remove course from planner\",\n    pluralName: \"Remove all courses from planner\",\n  }],\n  [ActionID.PLAN_COURSE, {\n    key: \"plan\",\n    icon: \"bookmark\",\n    name: \"Move course to planned\",\n    pluralName: \"Move all courses to planned\",\n  }],\n  [ActionID.COMPLETE_COURSE, {\n    key: \"complete\",\n    icon: \"checked calendar\",\n    name: \"Move course to completed\",\n    pluralName: \"Move all courses to completed\",\n  }],\n])\n\nexport interface ISelectableEntity {\n  getActions: () => Actions\n}\n\nexport interface ISelector {\n  getSelected: () => ISelectableEntity[];\n  unselectAll: () => void;\n  onToggle: (selectable: ISelectableEntity) => void;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\nimport { ActionID, Actions, ISelectableEntity } from \"../interfaces/SelectableInterfaces\";\nimport { ISearchableEntity, SearchableKeyWeight, Searchables } from \"../interfaces/SearchableInterfaces\";\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity, ISelectableEntity, ISearchableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  static defaultSearching: SearchableKeyWeight[] = [\n    { name: \"code\", weight: 2 },\n    { name: \"title\", weight: 1.5 },\n    { name: \"description\", weight: 0.5 },\n  ]\n\n  static searchableFields: Searchables = {\n    code: \"code\",\n    uoc: \"creditPoints\",\n    inDescription: \"description\",\n    faculty: \"facultyName\",\n    school: \"schoolName\",\n    inTitle: \"title\",\n  }\n\n  getSearchWeighting() {\n    return CourseModel.defaultSearching;\n  }\n\n  getSearchables() {\n    return CourseModel.searchableFields;\n  }\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  getActions() {\n    let actions: Actions = new Map();\n    actions.set(ActionID.REMOVE_COURSE, this.courseStatus !== CourseStatus.UNPLANNED ? () => this.setUnplanned() : undefined);\n    actions.set(ActionID.PLAN_COURSE, this.courseStatus !== CourseStatus.PLANNED ? () => this.setPlanned() : undefined);\n    actions.set(ActionID.COMPLETE_COURSE, this.courseStatus !== CourseStatus.COMPLETED ? () => this.setCompleted() : undefined);\n    return actions;\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError(error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch (course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n\n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { ISearchableEntity, SearchableKeyWeight, Searchables } from '../interfaces/SearchableInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity, ISearchableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  static defaultSearching: SearchableKeyWeight[] = [\n    { name: \"code\", weight: 2 },\n    { name: \"title\", weight: 1.5 },\n    { name: \"description\", weight: 0.5 },\n  ]\n\n  static searchableFields: Searchables = {\n    code: \"code\",\n    inTitle: \"title\",\n    academicItemType: \"academicItemType\",\n    uoc: \"creditPoints\",\n    inStructureSummary: \"structureSummary\",\n    inDescription: \"description\",\n    faculty: \"facultyName\",\n    school: \"schoolName\",\n    studyLevel: \"studyLevel\",\n  }\n\n  getSearchWeighting() {\n    return ProgramModel.defaultSearching;\n  }\n\n  getSearchables() {\n    return ProgramModel.searchableFields;\n  }\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { ISearchableEntity, SearchableKeyWeight, Searchables } from '../interfaces/SearchableInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity, ISearchableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  static defaultSearching: SearchableKeyWeight[] = [\n    { name: \"code\", weight: 2 },\n    { name: \"title\", weight: 1.5 },\n    { name: \"description\", weight: 0.5 },\n  ]\n\n  static searchableFields: Searchables = {\n    code: \"code\",\n    inTitle: \"title\",\n    academicItemType: \"academicItemType\",\n    uoc: \"creditPoints\",\n    inStructureSummary: \"structureSummary\",\n    inDescription: \"description\",\n    faculty: \"facultyName\",\n    school: \"schoolName\",\n    studyLevel: \"studyLevel\",\n  }\n\n  getSearchWeighting() {\n    return SpecialisationModel.defaultSearching;\n  }\n\n  getSearchables() {\n    return SpecialisationModel.searchableFields;\n  }\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();\n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import Fuse from \"fuse.js\";\nimport { autorun, makeAutoObservable, reaction, runInAction, when } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\nimport { parse } from \"search-query-parser\"\nimport { SearchableKeyWeight, Searchables } from \"../../interfaces/SearchableInterfaces\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\ntype SearchableModel = ProgramModel | SpecialisationModel | CourseModel;\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, { fireImmediately: true })\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, { fireImmediately: true })\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, { fireImmediately: true })\n\n    autorun(() => this.searchCourses(), { delay: 150 });\n\n    autorun(() => this.searchPrograms(), { delay: 150 });\n\n    autorun(() => this.searchSpecialisations(), { delay: 150 });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  public FUZZY_THRESHOLD: number = 0.4;\n\n  private search<T extends SearchableModel>(\n    setOutput: (data: T[]) => {}, searchData: T[], sortFn: (a: T, b: T) => number, filters: FilterModel<T>[],\n    searchableFields: Searchables,\n    defaultSearching: SearchableKeyWeight[]\n  ) {\n    if (this.queryText === \"\") {\n      setOutput(searchData.sort(sortFn));\n      return;\n    }\n\n    const parsedQueryText = parse(this.queryText, { keywords: Object.keys(searchableFields), offsets: false, tokenize: true });\n\n    let data = searchData;\n\n    // Apply filters\n    filters.forEach((filter) => {\n      data = filter.applyFilter(data)\n    })\n\n    // Apply field matching\n    let fields: { [key: string]: string }[] = [];\n    if (typeof (parsedQueryText) !== \"string\") {\n      for (const key in parsedQueryText) {\n        if (key === \"text\") continue;\n        if (key === \"exclude\") {\n          for (const excludedKey in parsedQueryText.exclude) {\n            const obj = {};\n            obj[searchableFields[excludedKey]] = `!${parsedQueryText.exclude[excludedKey]}`;\n            fields.push(obj);\n          }\n          continue;\n        }\n        const obj = {};\n        if (\"='!^\".includes(parsedQueryText[key][0])) {\n          obj[searchableFields[key]] = parsedQueryText[key];\n        } else {\n          // Fusejs include matching with 'value notation\n          obj[searchableFields[key]] = `'${parsedQueryText[key]}`;\n        }\n\n        fields.push(obj);\n      }\n    }\n\n    if (fields.length > 0) {\n      const fuseFuzzySearcher = new Fuse(data, {\n        keys: Object.values(searchableFields),\n        shouldSort: true,\n        threshold: this.FUZZY_THRESHOLD,\n        useExtendedSearch: true,\n      });\n\n      data = fuseFuzzySearcher.search({ $and: fields }).map((result => result.item));\n    }\n\n    // Fuzzy matching\n    const fuseFuzzySearcher = new Fuse(data, {\n      keys: defaultSearching,\n      shouldSort: true,\n      threshold: this.FUZZY_THRESHOLD,\n      useExtendedSearch: true,\n    });\n    if (typeof (parsedQueryText) === \"string\") {\n      data = fuseFuzzySearcher.search(parsedQueryText).map((result => result.item));\n    } else if (parsedQueryText.text) {\n      if (typeof (parsedQueryText.text) !== \"string\") {\n        data = fuseFuzzySearcher.search(parsedQueryText.text.join(\" \")).map((result => result.item));\n      } else {\n        data = fuseFuzzySearcher.search(parsedQueryText.text).map((result => result.item));\n      }\n    }\n\n    setOutput(data);\n  }\n\n  searchCourses() {\n    const setOutputFn = (data: CourseModel[]) => runInAction(() => this.searchResults.courseSearchResults = data)\n    const sortFn = (a, b) => (a.code > b.code) ? 1 : -1\n    this.search(\n      setOutputFn,\n      this.searchDataState.courseSearchData,\n      sortFn,\n      this.searchFilters.courseFilters,\n      CourseModel.searchableFields,\n      CourseModel.defaultSearching\n    );\n  }\n\n\n  searchPrograms() {\n    const setOutputFn = (data: ProgramModel[]) => runInAction(() => this.searchResults.programSearchResults = data)\n    const sortFn = (a, b) => (a.title > b.title) ? 1 : -1\n    this.search(\n      setOutputFn,\n      this.searchDataState.programSearchData,\n      sortFn,\n      this.searchFilters.programFilters,\n      ProgramModel.searchableFields,\n      ProgramModel.defaultSearching\n    );\n  }\n\n  searchSpecialisations() {\n    const setOutputFn = (data: SpecialisationModel[]) => runInAction(() => this.searchResults.specialisationSearchResults = data)\n    const sortFn = (a, b) => (a.title > b.title) ? 1 : -1\n    this.search(\n      setOutputFn,\n      this.searchDataState.specialisationSearchData,\n      sortFn,\n      this.searchFilters.specialisationFilters,\n      SpecialisationModel.searchableFields,\n      SpecialisationModel.defaultSearching\n    );\n  }\n}\n","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    :before{\n      width:0px;\n    }\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const FilterColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nexport interface ISearchPanelProps {\n  searchPanelViewModel: SearchPanelViewModel\n}\n\nconst SearchPanel = observer(({ searchPanelViewModel }: ISearchPanelProps) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Menu pointing secondary>\n                <Menu.Item\n                  name={\"courses\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                >\n                  {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"programs\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                >\n                  {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"specialisations\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                >\n                  {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                </Menu.Item>\n              </Menu>\n              <ResultsSubtextContainer>\n                <FoundResults>\n                  Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                </FoundResults>\n\n                <span>\n                  <span style={{ marginRight: \"10px\" }}>Results per page</span>\n                  <Dropdown\n                    text={searchPanelViewModel.resultsPerPage.toString()}\n                    selection\n                    options={[\n                      { text: 10, value: 10 },\n                      { text: 20, value: 20 },\n                      { text: 30, value: 30 },\n                      { text: 50, value: 50 },\n                    ]}\n                    onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                  />\n                </span>\n              </ResultsSubtextContainer>\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                  ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                  ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                  ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Input, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\nimport SearchPanel from '../SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from '../SearchPanel/SearchPanelViewModel';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport { SearchDataState } from '../../states/SearchDataState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n  searchDataState: SearchDataState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    height:50px;\n    margin:0;\n  }\n`\n\nconst SearchPanelView = styled.div`\n  &&&{\n    position:block;\n    z-index:420;\n    background:white;\n    margin-top:11px;\n    display: ${props => props.isActive ? \"block\" : \"none\"};\n    border: 1px solid rgba(34,36,38,.15);\n    box-shadow:0 2px 5px 0 rgb(34 36 38 / 15%);\n  }\n`\n\nconst SearchInputItem = styled(Menu.Item)`\n  &&&& {\n    display:block;\n    position: absolute;\n    right:0;\n    ${props => props.isActive ? \"width: calc(min(60vw,1200px))\" : \"width: 300px\"};\n    // transition: width 0.2s cubic-bezier(0.000, 0.795, 0.000, 1.000);\n    z-index:420;\n  }\n`\n\nexport const MenuBar = observer(({userState, searchDataState}: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  const [searchPanelActive, setSearchPanelActive] = useState(false);\n  const searchPanelViewModel = new SearchPanelViewModel(searchDataState);\n\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n            <Menu.Menu position=\"right\">\n              <OutsideClickHandler onOutsideClick={() => setSearchPanelActive(false)}>\n\n                <SearchInputItem isActive={searchPanelActive}>\n                  <Input\n                    icon=\"search\"\n                    iconPosition=\"left\"\n                    placeholder=\"Search\"\n                    loading={searchPanelViewModel.isLoading}\n                    onFocus={() => { setSearchPanelActive(true); }}\n                    onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                    value={searchPanelViewModel.queryText}\n                  />\n                  <SearchPanelView isActive={searchPanelActive}>\n                    <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n                  </SearchPanelView>\n                </SearchInputItem>\n\n              </OutsideClickHandler>\n            </Menu.Menu>\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport React from 'react';\nimport { useEffect } from 'react';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    border: 2px inset lightgrey;\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCoursesCount: number;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  useEffect(() => {\n    return props.registerDraggableRef(props.course, draggableRef);\n  })\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={(event: MouseEvent) => props.onCourseClick(props.course, event)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(event: MouseEvent) => props.onCourseContextMenu(props.course, event)}\n            // https://github.com/AirLabsTeam/react-drag-to-select#working-with-draggable-elements\n            // Tell region select this is a draggable.\n            data-draggable={true}\n          >\n\n            {!props.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {snapshot.isDragging && props.selectedCoursesCount > 1 ? (\n              <SelectionCount>{props.selectedCoursesCount}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius:2px;\n\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n  ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n  padding: 6px;\n  margin: 0 0;\n  display: flex;\n  width: 200px;\n`;\n\nconst CourseList = styled.div`\n  padding: 6px;\n  min-height: 100px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n  flex-grow: 1;\n  display: flex;\n  flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n  flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n  align-content: flex-start;\n  max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n  && {\n    margin: auto 0 auto 0;\n    height: fit-content;\n    vertical-align: middle;\n    white-space: nowrap;\n  } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.selectedCourses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = props.selectedCourses.includes(course);\n                  const isGhosting: boolean = isSelected && !!props.draggingCourseId && props.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      registerDraggableRef={props.registerDraggableRef}\n                      selectedCoursesCount={props.selectedCourses.length}\n                      onCourseClick={props.onCourseClick}\n                      onCourseContextMenu={props.onCourseContextMenu}\n                      isRegionSelecting={props.isRegionSelecting}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              registerDraggableRef={props.registerDraggableRef}\n              selectedCourses={props.selectedCourses}\n              draggingCourseId={props.draggingCourseId}\n              onCourseClick={props.onCourseClick}\n              onCourseContextMenu={props.onCourseContextMenu}\n              isRegionSelecting={props.isRegionSelecting}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { observer, Observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Popup, Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { ActionableMetaData, ActionID, ISelector } from \"../../interfaces/SelectableInterfaces\";\n\ninterface ContextMenuProps {\n  selectorViewModel: ISelector;\n  isContextOpen: boolean;\n  setIsContextOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst ContextMenu = observer((props: ContextMenuProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"contextmenu\", onWindowContextMenu);\n\n    return () => {\n      window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n    }\n  })\n\n  const contextRef = React.useRef<any>();\n\n  const [menuItems, setMenuItems] = React.useState<MenuItemProps[]>([]);\n\n  const getContextMenuItems = (): MenuItemProps[] => {\n    const useLanguagePlural = props.selectorViewModel.getSelected().length > 1;\n    const actionItems = props.selectorViewModel.getSelected().map(selectable => selectable.getActions());\n\n    const menuItems = [\n      ...actionItems.reduce(\n        (prev: Map<ActionID, VoidFunction[]>, curr) => {\n          curr.forEach((value, key) => {\n            if (!prev.get(key)) prev.set(key, []);\n            if (!value) return;\n\n            prev.get(key)?.push(value);\n          })\n          return prev;\n        }, new Map<ActionID, VoidFunction[]>()\n      ).entries()\n    ]\n    .filter(([_, fnArray]) => fnArray.length > 0)\n    .map(([key, fnArray]) => {\n      const action = ActionableMetaData.get(key);\n      if (!action) return {};\n      return {\n          key: action.key,\n          content: useLanguagePlural ? action.pluralName : action.name,\n          icon: action.icon,\n          onClick: () => {\n            fnArray.forEach((fn) => fn.call(null));\n          }\n        } as MenuItemProps\n    });\n\n    return menuItems;\n  }\n\n  const openContext = (event: MouseEvent) => {\n    contextRef.current = {\n      getBoundingClientRect: () => ({\n        left: event.clientX,\n        top: event.clientY,\n        right: event.clientX + 1,\n        bottom: event.clientY + 1,\n        height: 0,\n        width: 0,\n      }),\n    }\n    props.setIsContextOpen(true);\n  }\n\n  const onWindowContextMenu = (event: MouseEvent) => {\n    if (event.defaultPrevented) return;\n\n    const selected = props.selectorViewModel.getSelected();\n    if (selected.length === 0) {\n      // Don't use context when no items selected. Possibly change this.\n      return;\n    } else {\n      // Show context based on selected items\n      setMenuItems(getContextMenuItems());\n    }\n\n    event.preventDefault();\n\n    openContext(event);\n  }\n\n  return <Observer>\n    {() => {\n      return (\n        <Popup\n          basic\n          context={contextRef}\n          onClose={() => props.setIsContextOpen(false)}\n          open={props.isContextOpen}\n        >\n          <Menu\n            items={menuItems}\n            onItemClick={(e) => {\n              e.preventDefault();\n              props.setIsContextOpen(false);\n            }}\n            secondary\n            vertical\n          />\n        </Popup>\n      )\n    }}\n  </Observer>\n})\n\nexport default ContextMenu;","import React from \"react\";\n\nexport const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | React.MouseEvent | KeyboardEvent | React.KeyboardEvent) => {\n  return navigator.platform.includes('Mac')\n    ? event.metaKey\n    : event.ctrlKey;\n};","import React from \"react\";\nimport { Box, boxesIntersect, useSelectionContainer } from \"react-drag-to-select\";\nimport { ISelectableEntity, ISelector } from \"../../interfaces/SelectableInterfaces\";\nimport { wasToggleInSelectionGroupKeyUsed } from \"../../helpers/EventUtils\";\n\ninterface RegionSelectProps {\n  selectorViewModel: ISelector,\n  setIsRegionSelecting: (b: boolean) => void;\n  draggableItemsMap: Map<ISelectableEntity, HTMLDivElement>,\n}\n\nconst RegionSelect = (props: RegionSelectProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"mousedown\", onMouseDown);\n    window.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", onMouseDown)\n      window.removeEventListener(\"mouseup\", onMouseUp);\n    }\n  })\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (isToggleSelectionKeyUsed) return;\n    if (wasToggleInSelectionGroupKeyUsed(event)) setIsToggleSelectionKeyUsed(true)\n  }\n  const onMouseUp = (event: MouseEvent) => {\n    setIsToggleSelectionKeyUsed(false)\n  }\n\n  const draggableBoxesRef = React.useRef<[ISelectableEntity, Box][]>([]);\n\n  const [isToggleSelectionKeyUsed, setIsToggleSelectionKeyUsed] = React.useState(false);\n  const [wasInRegion, setWasInRegion] = React.useState<ISelectableEntity[]>([]);\n\n  const onSelectionStart = () => {\n    props.setIsRegionSelecting(true);\n    draggableBoxesRef.current = [...props.draggableItemsMap.entries()].reduce((previous: [ISelectableEntity, Box][], [selectable, div]): [ISelectableEntity, Box][] => {\n      const rect = div.getBoundingClientRect();\n      return [\n        ...previous,\n        [selectable, rect]\n      ];\n    }, []);\n  }\n\n  const onSelectionChangeWithToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([selectable, draggableBox]) => {\n        const alreadyInRegion = wasInRegion.includes(selectable);\n        const nowInRegion = boxesIntersect(box, draggableBox);\n\n        // Item not in region and we don't need to worry about it, or item already processed\n        if (alreadyInRegion === nowInRegion) return false;\n\n        if (alreadyInRegion && !nowInRegion) {\n          // Draggable escapes a region, toggle it and remove from items in region.\n          setWasInRegion(prevSelected => prevSelected.filter((prevSelectable) => prevSelectable !== selectable));\n        }\n\n        if (!alreadyInRegion && nowInRegion) {\n          // Draggable enters a region, toggle it and add to items in region.\n          setWasInRegion(prevSelected => [...prevSelected, selectable]);\n        }\n        return true;\n      }, [])\n      .forEach(([courseModel, _]) => props.selectorViewModel.onToggle(courseModel));\n  }\n\n  const onSelectionChangeWithoutToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([selectable, draggableBox]) => {\n        const isSelected: boolean = props.selectorViewModel.getSelected().includes(selectable);\n        const isIntersecting: boolean = boxesIntersect(box, draggableBox);\n\n        return (isSelected !== isIntersecting);\n      }, [])\n      .forEach(([selectable, _]) => props.selectorViewModel.onToggle(selectable));\n  }\n\n  const onSelectionEnd = () => {\n    draggableBoxesRef.current = [];\n    setWasInRegion([]);\n  }\n\n  const { DragSelection } = useSelectionContainer({\n    onSelectionStart,\n    onSelectionEnd,\n\n    onSelectionChange: React.useCallback(\n      isToggleSelectionKeyUsed\n        ? onSelectionChangeWithToggleKey\n        : onSelectionChangeWithoutToggleKey\n      , [isToggleSelectionKeyUsed, wasInRegion]\n    ),\n  });\n\n  return (<DragSelection />)\n}\n\nexport default RegionSelect;","import React from \"react\";\nimport { DragDropContext, DragStart, DropResult } from \"react-beautiful-dnd\";\nimport { CourseModel } from \"../../../../models/CourseModel\";\nimport { ICourseGroup, PlannerViewModel } from \"../../PlannerViewModel\";\n\ninterface DraggingProps extends React.PropsWithChildren<any> {\n  plannerViewModel: PlannerViewModel\n  setIsDragging: React.Dispatch<React.SetStateAction<boolean>>\n\n}\n\nconst Dragging = (props: DraggingProps) => {\n  const courseState = props.plannerViewModel.courseState;\n\n  const onDragStart = (initial: DragStart) => {\n    props.setIsDragging(true);\n\n    const selected: CourseModel | undefined = props.plannerViewModel.getSelected().find(\n      (course: CourseModel): boolean => course.id === initial.draggableId,\n    );\n\n    if (!selected) props.plannerViewModel.unselectAll();\n\n    props.plannerViewModel.draggingCourseId = initial.draggableId;\n\n    const course = courseState.getCourseById(initial.draggableId);\n\n    if (!course) return;\n\n    // Don't calculate validations if we are multi selecting\n    if (props.plannerViewModel.selected.length > 1) return;\n\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      possibleTerms: props.plannerViewModel.calculateDisplayableTerms().filter(term => {\n        return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n      }),\n      prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n    }\n  }\n\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n    if (!destination || result.reason === \"CANCEL\") {\n      props.plannerViewModel.draggingCourseId = undefined;\n      return;\n    }\n    if (!props.plannerViewModel.draggingCourseId) return;\n\n    props.plannerViewModel.getSelected().forEach((course: CourseModel) =>\n      props.plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId)\n    );\n\n    const allGroups = props.plannerViewModel.getAllGroups();\n    allGroups.forEach((group: ICourseGroup) => {\n      group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n        !props.plannerViewModel.getSelected().find((selectedCourse: CourseModel) =>\n          selectedCourse.id === courseInGroup.id\n        )\n      )\n    })\n    props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...props.plannerViewModel.getSelected())\n\n    const draggingCourseIsSelected: boolean = !!props.plannerViewModel.getSelected().find((courseModel) => {\n      return courseModel.id === props.plannerViewModel.draggingCourseId;\n    });\n    if (!draggingCourseIsSelected) {\n      const courseModel = courseState.getCourseById(props.plannerViewModel.draggingCourseId);\n      if (courseModel) {\n        props.plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId);\n        props.plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n        props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + props.plannerViewModel.selected.length, 0, courseModel);\n      }\n    }\n\n    props.setIsDragging(false);\n\n    props.plannerViewModel.draggingCourseId = undefined;\n\n    props.plannerViewModel.clearCurrentDraggableProps()\n  }\n\n  const onBeforeCapture = () => {\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      isDragging: true,\n    }\n  }\n\n  return (\n    <DragDropContext\n      onBeforeCapture={onBeforeCapture}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    >\n      {props.children}\n    </DragDropContext>\n  )\n}\nexport default Dragging;","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components'\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel } from '../../models/CourseModel';\nimport ContextMenu from \"../../components/ContextMenu/ContextMenuView\"\nimport RegionSelect from '../../components/RegionSelect/RegionSelectView';\nimport Dragging from './components/Dragging/DraggingView';\nimport { wasToggleInSelectionGroupKeyUsed } from \"../../helpers/EventUtils\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const plannerState = plannerViewModel.plannerState;\n\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      // Drag region selection\n      const draggableItemsRef = React.useRef(new Map<CourseModel, HTMLDivElement>());\n      const [isRegionSelecting, setIsRegionSelecting] = React.useState(false);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>): (() => void) => {\n        if (!ref.current) return () => { };\n        draggableItemsRef.current.set(courseModel, ref.current);\n\n        return () => {\n          draggableItemsRef.current.delete(courseModel);\n        };\n      }\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAll();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (wasToggleInSelectionGroupKeyUsed(event)) return;\n\n        plannerViewModel.unselectAll();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const onCourseClick = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.button !== 0) return;\n\n        if (isRegionSelecting) return;\n\n        event.preventDefault();\n        if (isContextOpen) return;\n\n        if (!wasToggleInSelectionGroupKeyUsed(event)) {\n          plannerViewModel.unselectAll();\n        }\n\n        plannerViewModel.onToggle(course);\n      }\n\n      // Context menu\n      const [isContextOpen, setIsContextOpen] = React.useState(false);\n\n      const onCourseContextMenu = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (plannerViewModel.selected.includes(course)) return;\n\n        plannerViewModel.unselectAll();\n        plannerViewModel.onToggle(course);\n      }\n\n      return (\n        <React.Fragment>\n          <RegionSelect\n            selectorViewModel={plannerViewModel}\n            draggableItemsMap={draggableItemsRef.current}\n            setIsRegionSelecting={setIsRegionSelecting}\n          />\n          <ContextMenu\n            selectorViewModel={plannerViewModel}\n            isContextOpen={isContextOpen}\n            setIsContextOpen={setIsContextOpen}\n          />\n          <Dragging\n            plannerViewModel={plannerViewModel}\n            setIsDragging={setIsDragging}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                selectedCourses={plannerViewModel.getSelected()}\n                draggingCourseId={plannerViewModel.draggingCourseId}\n                onCourseClick={onCourseClick}\n                onCourseContextMenu={onCourseContextMenu}\n                isRegionSelecting={isRegionSelecting}\n                registerDraggableRef={registerDraggable}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.getSelected()}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      selectedCourses={plannerViewModel.getSelected()}\n                      draggingCourseId={plannerViewModel.draggingCourseId}\n                      onCourseClick={onCourseClick}\n                      onCourseContextMenu={onCourseContextMenu}\n                      isRegionSelecting={isRegionSelecting}\n                      registerDraggableRef={registerDraggable}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.getSelected()}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n                : <></>\n            }\n          </Dragging>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, IReactionDisposer, makeObservable, observable, reaction } from \"mobx\";\nimport { ISelectableEntity, ISelector } from \"../../interfaces/SelectableInterfaces\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel implements ISelector {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\" | \"_selected\" | \"_draggingCourseId\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n\n      _selected: observable,\n      selected: computed,\n\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedCourses\n\n  private _reactionDisposers: Map<ISelectableEntity, IReactionDisposer> = new Map();\n  private _selected: ISelectableEntity[] = [];\n\n  getSelected(): CourseModel[] {\n    return this._selected as CourseModel[];\n  }\n\n  get selected(): ISelectableEntity[] {\n    return this._selected;\n  }\n  set selected(state: ISelectableEntity[]) {\n    this._selected = state;\n  }\n\n  unselectAll() {\n    this.selected.forEach((selectable) => this._reactionDisposers.get(selectable)?.call(null));\n    this.selected = [];\n  }\n\n  private addRemoveReaction(selectable: ISelectableEntity) {\n    const reactionDisposer = reaction(\n      () => (selectable as CourseModel).courseStatus,\n      (status, prevStatus) => {\n        if (status === prevStatus) return;\n        if (status === CourseStatus.UNPLANNED) {\n          this.selected = this.getSelected().filter((selectedCourse) => selectedCourse.id !== (selectable as CourseModel).id);\n          this._reactionDisposers.get(selectable)?.call(null);\n        }\n      }\n    )\n    this._reactionDisposers.set(selectable, reactionDisposer);\n  }\n\n  onToggle(selectable: ISelectableEntity) {\n    const indexOfSelectable: number = this.selected.indexOf(selectable);\n\n    const newCourses: ISelectableEntity[] = (() => {\n      if (indexOfSelectable === -1) {\n        // Item not selected, add to group\n        this.addRemoveReaction(selectable);\n        return [...this.selected, selectable];\n      } else {\n        // Item was selected, remove it\n        const courses: ISelectableEntity[] = [...this.selected];\n        courses.splice(indexOfSelectable, 1);\n        this._reactionDisposers.get(selectable)?.call(null);\n        return courses;\n      }\n    })();\n\n    this.selected = newCourses;\n  }\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar\n          userState={applicationContext.userState}\n          searchDataState={applicationContext.searchDataState}\n        />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}