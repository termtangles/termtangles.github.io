{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","models/Filters/FilterModel.ts","interfaces/SelectableInterfaces.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/SearchPanelStyles.ts","models/TermModel.ts","models/CourseModel.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","components/ContextMenu/ContextMenuView.tsx","helpers/EventUtils.ts","components/RegionSelect/RegionSelectView.tsx","containers/Planner/components/Dragging/DraggingView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","SearchPanelItem","FilterModel","name","fnGetTargetValue","_possibleValues","Set","_selectedValues","filterResultMapping","initializeFilter","allSearchData","map","flat","filter","applyFilter","searchResults","results","size","values","filterValue","includes","length","makeAutoObservable","isNumerical","isNaN","Number","sort","b","possibleFilterValue","filterElementName","numMatchingRecords","has","delete","add","ActionID","SearchPanelViewModel","searchDataState","queryText","isLoading","resultsPerPage","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","reaction","courseSearchData","setIsLoading","filters","course","termOffering","facultyName","schoolName","creditPoints","getCourseFilters","fireImmediately","programSearchData","program","intakePeriod","academicItemType","getProgramFilters","specialisationSearchData","specialisation","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","code","toLowerCase","title","runInAction","ResetButtonStyle","backgroundColor","border","color","padding","textDecoration","fontSize","margin","cursor","width","height","FilterSection","observer","useState","expandedFilters","setExpandedFilters","filterState","getFilterState","Menu","Item","Accordion","Title","active","content","newExpandedFilters","Content","Form","Group","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","className","element","resetValue","fluid","as","vertical","ResultItem","ResultItemHeader","Header","ResultItemContent","ResultItemExtra","Extra","ResultCollection","ResultsPagination","Pagination","FilterColumn","Grid","Column","ResultsColumn","TermModel","year","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","term","tryGetTermNumber","serializedTerm","CourseStatus","ActionableMetaData","REMOVE_COURSE","icon","pluralName","PLAN_COURSE","COMPLETE_COURSE","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","implementationYear","keywords","prerequisites","urlMap","allocatedTerm","undefined","id","courseStatus","UNPLANNED","_errors","ALLOCATED","clear","COMPLETED","PLANNED","actions","setUnplanned","setPlanned","setCompleted","status","period","termModel","termFromSerializedData","setAllocated","e","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","Button","basic","url","newWindow","window","open","opener","openInNewTab","Icon","CourseResultCollectionView","divided","CourseSearchTab","activePageNumber","setActivePageNumber","columns","container","Row","searchPanelViewModel","slice","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","onMouseEnter","progressionStatus","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultView","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Container","pointing","secondary","marginRight","Dropdown","text","selection","options","setResultsPerPage","MenuBarView","SearchPanelView","isActive","SearchInputItem","MenuBar","studyLevelChangeAction","setStudyLevelChangeAction","searchPanelActive","setSearchPanelActive","header","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","position","onOutsideClick","Input","iconPosition","placeholder","loading","onFocus","setQueryText","Modal","onClose","Actions","negative","positive","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","SelectionCount","UnselectableText","p","tooltipStyle","CourseView","allocatedPeriod","output","join","formatTermOffering","errorList","errors","missing","missingFormatted","regex","replace","i","push","formatErrors","useEffect","registerDraggableRef","draggableRef","draggableId","index","droppableIndex","provided","snapshot","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","onCourseClick","onContextMenu","onCourseContextMenu","data-draggable","isRegionSelecting","Tooltip","aria-label","aria-multiline","arrow","selectedCoursesCount","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","isPossibleTerm","currentDraggableProps","possibleTerms","_term","equals","totalUoc","courses","reduce","droppableId","direction","droppableProps","selectedCourses","draggingCourseId","prerequisiteCourseIds","YearView","courseGroups","courseGroup","ContextMenu","addEventListener","onWindowContextMenu","removeEventListener","contextRef","menuItems","setMenuItems","defaultPrevented","selectorViewModel","getSelected","useLanguagePlural","actionItems","selectable","getActions","prev","curr","entries","fnArray","action","fn","call","getContextMenuItems","preventDefault","getBoundingClientRect","left","clientX","top","clientY","right","bottom","setIsContextOpen","openContext","Popup","context","isContextOpen","items","onItemClick","wasToggleInSelectionGroupKeyUsed","navigator","platform","metaKey","ctrlKey","RegionSelect","onMouseDown","onMouseUp","isToggleSelectionKeyUsed","setIsToggleSelectionKeyUsed","draggableBoxesRef","wasInRegion","setWasInRegion","DragSelection","useSelectionContainer","onSelectionStart","setIsRegionSelecting","draggableItemsMap","previous","rect","onSelectionEnd","onSelectionChange","useCallback","box","draggableBox","alreadyInRegion","nowInRegion","boxesIntersect","prevSelected","prevSelectable","courseModel","onToggle","Dragging","plannerViewModel","onBeforeCapture","onDragStart","initial","setIsDragging","find","unselectAll","getCourseById","selected","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","selectedCourse","spliceByGroupId","clearCurrentDraggableProps","children","YearPlanner","Planner","plannerState","onWindowKeyDown","onDragEnter","onDragExit","draggableItemsRef","registerDraggable","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_reactionDisposers","_selected","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","allocatedGroups","synchronizePlannerState","state","reactionDisposer","prevStatus","indexOfSelectable","indexOf","newCourses","addRemoveReaction","splice","sourceDroppableId","destDroppableId","fromMappingName","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","_updateStudyLevel","registerStudyLevelUpdateActionCallback","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","relationships","parseCurriculumElements","relationData","relationshipList","relationshipObj","ProgramModel","additionalInfo","structureSummary","curriculumStructure","programConstraints","SpecialisationModel","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","ApplicationContext","createContext","CurriculumElementsView","applicationContext","useContext","curriculumElements","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e02f1cf.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { SemanticICONS } from \"semantic-ui-react/dist/commonjs/generic\";\n\nexport interface IActionMetaData {\n  key: string,\n  icon: SemanticICONS,\n  name: string,\n  pluralName?: string,\n}\n\nexport enum ActionID {\n  REMOVE_COURSE,\n  PLAN_COURSE,\n  COMPLETE_COURSE,\n}\n\nexport type Actions = Map<ActionID, undefined | VoidFunction>;\n\nexport const ActionableMetaData = new Map<ActionID, IActionMetaData>([\n  [ActionID.REMOVE_COURSE, {\n    key: \"remove\",\n    icon: \"delete calendar\",\n    name: \"Remove course from planner\",\n    pluralName: \"Remove all courses from planner\",\n  }],\n  [ActionID.PLAN_COURSE, {\n    key: \"plan\",\n    icon: \"bookmark\",\n    name: \"Move course to planned\",\n    pluralName: \"Move all courses to planned\",\n  }],\n  [ActionID.COMPLETE_COURSE, {\n    key: \"complete\",\n    icon: \"checked calendar\",\n    name: \"Move course to completed\",\n    pluralName: \"Move all courses to completed\",\n  }],\n])\n\nexport interface ISelectableEntity {\n  getActions: () => Actions\n}\n\nexport interface ISelector {\n  getSelected: () => ISelectableEntity[];\n  unselectAll: () => void;\n  onToggle: (selectable: ISelectableEntity) => void;\n}\n","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    :before{\n      width:0px;\n    }\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const FilterColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\nimport { ActionID, Actions, ISelectableEntity } from \"../interfaces/SelectableInterfaces\";\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity, ISelectableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  getActions() {\n    let actions: Actions = new Map();\n    actions.set(ActionID.REMOVE_COURSE, this.courseStatus !== CourseStatus.UNPLANNED ? () => this.setUnplanned() : undefined);\n    actions.set(ActionID.PLAN_COURSE, this.courseStatus !== CourseStatus.PLANNED ? () => this.setPlanned() : undefined);\n    actions.set(ActionID.COMPLETE_COURSE, this.courseStatus !== CourseStatus.COMPLETED ? () => this.setCompleted() : undefined);\n    return actions;\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nexport interface ISearchPanelProps {\n  searchPanelViewModel: SearchPanelViewModel\n}\n\nconst SearchPanel = observer(({ searchPanelViewModel }: ISearchPanelProps) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Menu pointing secondary>\n                <Menu.Item\n                  name={\"courses\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                >\n                  {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"programs\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                >\n                  {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"specialisations\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                >\n                  {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                </Menu.Item>\n              </Menu>\n              <ResultsSubtextContainer>\n                <FoundResults>\n                  Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                </FoundResults>\n\n                <span>\n                  <span style={{ marginRight: \"10px\" }}>Results per page</span>\n                  <Dropdown\n                    text={searchPanelViewModel.resultsPerPage.toString()}\n                    selection\n                    options={[\n                      { text: 10, value: 10 },\n                      { text: 20, value: 20 },\n                      { text: 30, value: 30 },\n                      { text: 50, value: 50 },\n                    ]}\n                    onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                  />\n                </span>\n              </ResultsSubtextContainer>\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                  ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                  ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                  ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Input, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\nimport SearchPanel from '../SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from '../SearchPanel/SearchPanelViewModel';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport { SearchDataState } from '../../states/SearchDataState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n  searchDataState: SearchDataState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    height:50px;\n    margin:0;\n  }\n`\n\nconst SearchPanelView = styled.div`\n  &&&{\n    position:block;\n    z-index:420;\n    background:white;\n    margin-top:11px;\n    display: ${props => props.isActive ? \"block\" : \"none\"};\n    border: 1px solid rgba(34,36,38,.15);\n    box-shadow:0 2px 5px 0 rgb(34 36 38 / 15%);\n  }\n`\n\nconst SearchInputItem = styled(Menu.Item)`\n  &&&& {\n    display:block;\n    position: absolute;\n    right:0;\n    ${props => props.isActive ? \"width: calc(min(60vw,1200px))\" : \"width: 300px\"};\n    // transition: width 0.2s cubic-bezier(0.000, 0.795, 0.000, 1.000);\n    z-index:420;\n  }\n`\n\nexport const MenuBar = observer(({userState, searchDataState}: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  const [searchPanelActive, setSearchPanelActive] = useState(false);\n  const searchPanelViewModel = new SearchPanelViewModel(searchDataState);\n\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n            <Menu.Menu position=\"right\">\n              <OutsideClickHandler onOutsideClick={() => setSearchPanelActive(false)}>\n\n                <SearchInputItem isActive={searchPanelActive}>\n                  <Input\n                    icon=\"search\"\n                    iconPosition=\"left\"\n                    placeholder=\"Search\"\n                    loading={searchPanelViewModel.isLoading}\n                    onFocus={() => { setSearchPanelActive(true); }}\n                    onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                    value={searchPanelViewModel.queryText}\n                  />\n                  <SearchPanelView isActive={searchPanelActive}>\n                    <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n                  </SearchPanelView>\n                </SearchInputItem>\n\n              </OutsideClickHandler>\n            </Menu.Menu>\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport React from 'react';\nimport { useEffect } from 'react';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    border: 2px inset lightgrey;\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCoursesCount: number;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  useEffect(() => {\n    return props.registerDraggableRef(props.course, draggableRef);\n  })\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={(event: MouseEvent) => props.onCourseClick(props.course, event)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(event: MouseEvent) => props.onCourseContextMenu(props.course, event)}\n            // https://github.com/AirLabsTeam/react-drag-to-select#working-with-draggable-elements\n            // Tell region select this is a draggable.\n            data-draggable={true}\n          >\n\n            {!props.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {snapshot.isDragging && props.selectedCoursesCount > 1 ? (\n              <SelectionCount>{props.selectedCoursesCount}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius:2px;\n\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n  ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n  padding: 6px;\n  margin: 0 0;\n  display: flex;\n  width: 200px;\n`;\n\nconst CourseList = styled.div`\n  padding: 6px;\n  min-height: 100px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n  flex-grow: 1;\n  display: flex;\n  flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n  flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n  align-content: flex-start;\n  max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n  && {\n    margin: auto 0 auto 0;\n    height: fit-content;\n    vertical-align: middle;\n    white-space: nowrap;\n  } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.selectedCourses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = props.selectedCourses.includes(course);\n                  const isGhosting: boolean = isSelected && !!props.draggingCourseId && props.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      registerDraggableRef={props.registerDraggableRef}\n                      selectedCoursesCount={props.selectedCourses.length}\n                      onCourseClick={props.onCourseClick}\n                      onCourseContextMenu={props.onCourseContextMenu}\n                      isRegionSelecting={props.isRegionSelecting}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              registerDraggableRef={props.registerDraggableRef}\n              selectedCourses={props.selectedCourses}\n              draggingCourseId={props.draggingCourseId}\n              onCourseClick={props.onCourseClick}\n              onCourseContextMenu={props.onCourseContextMenu}\n              isRegionSelecting={props.isRegionSelecting}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { observer, Observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Popup, Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { ActionableMetaData, ActionID, ISelector } from \"../../interfaces/SelectableInterfaces\";\n\ninterface ContextMenuProps {\n  selectorViewModel: ISelector;\n  isContextOpen: boolean;\n  setIsContextOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst ContextMenu = observer((props: ContextMenuProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"contextmenu\", onWindowContextMenu);\n\n    return () => {\n      window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n    }\n  })\n\n  const contextRef = React.useRef<any>();\n\n  const [menuItems, setMenuItems] = React.useState<MenuItemProps[]>([]);\n\n  const getContextMenuItems = (): MenuItemProps[] => {\n    const useLanguagePlural = props.selectorViewModel.getSelected().length > 1;\n    const actionItems = props.selectorViewModel.getSelected().map(selectable => selectable.getActions());\n\n    const menuItems = [\n      ...actionItems.reduce(\n        (prev: Map<ActionID, VoidFunction[]>, curr) => {\n          curr.forEach((value, key) => {\n            if (!prev.get(key)) prev.set(key, []);\n            if (!value) return;\n\n            prev.get(key)?.push(value);\n          })\n          return prev;\n        }, new Map<ActionID, VoidFunction[]>()\n      ).entries()\n    ]\n    .filter(([_, fnArray]) => fnArray.length > 0)\n    .map(([key, fnArray]) => {\n      const action = ActionableMetaData.get(key);\n      if (!action) return {};\n      return {\n          key: action.key,\n          content: useLanguagePlural ? action.pluralName : action.name,\n          icon: action.icon,\n          onClick: () => {\n            fnArray.forEach((fn) => fn.call(null));\n          }\n        } as MenuItemProps\n    });\n\n    return menuItems;\n  }\n\n  const openContext = (event: MouseEvent) => {\n    contextRef.current = {\n      getBoundingClientRect: () => ({\n        left: event.clientX,\n        top: event.clientY,\n        right: event.clientX + 1,\n        bottom: event.clientY + 1,\n        height: 0,\n        width: 0,\n      }),\n    }\n    props.setIsContextOpen(true);\n  }\n\n  const onWindowContextMenu = (event: MouseEvent) => {\n    if (event.defaultPrevented) return;\n\n    const selected = props.selectorViewModel.getSelected();\n    if (selected.length === 0) {\n      // Don't use context when no items selected. Possibly change this.\n      return;\n    } else {\n      // Show context based on selected items\n      setMenuItems(getContextMenuItems());\n    }\n\n    event.preventDefault();\n\n    openContext(event);\n  }\n\n  return <Observer>\n    {() => {\n      return (\n        <Popup\n          basic\n          context={contextRef}\n          onClose={() => props.setIsContextOpen(false)}\n          open={props.isContextOpen}\n        >\n          <Menu\n            items={menuItems}\n            onItemClick={(e) => {\n              e.preventDefault();\n              props.setIsContextOpen(false);\n            }}\n            secondary\n            vertical\n          />\n        </Popup>\n      )\n    }}\n  </Observer>\n})\n\nexport default ContextMenu;","import React from \"react\";\n\nexport const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | React.MouseEvent | KeyboardEvent | React.KeyboardEvent) => {\n  return navigator.platform.includes('Mac')\n    ? event.metaKey\n    : event.ctrlKey;\n};","import React from \"react\";\nimport { Box, boxesIntersect, useSelectionContainer } from \"react-drag-to-select\";\nimport { ISelectableEntity, ISelector } from \"../../interfaces/SelectableInterfaces\";\nimport { wasToggleInSelectionGroupKeyUsed } from \"../../helpers/EventUtils\";\n\ninterface RegionSelectProps {\n  selectorViewModel: ISelector,\n  setIsRegionSelecting: (b: boolean) => void;\n  draggableItemsMap: Map<ISelectableEntity, HTMLDivElement>,\n}\n\nconst RegionSelect = (props: RegionSelectProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"mousedown\", onMouseDown);\n    window.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", onMouseDown)\n      window.removeEventListener(\"mouseup\", onMouseUp);\n    }\n  })\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (isToggleSelectionKeyUsed) return;\n    if (wasToggleInSelectionGroupKeyUsed(event)) setIsToggleSelectionKeyUsed(true)\n  }\n  const onMouseUp = (event: MouseEvent) => {\n    setIsToggleSelectionKeyUsed(false)\n  }\n\n  const draggableBoxesRef = React.useRef<[ISelectableEntity, Box][]>([]);\n\n  const [isToggleSelectionKeyUsed, setIsToggleSelectionKeyUsed] = React.useState(false);\n  const [wasInRegion, setWasInRegion] = React.useState<ISelectableEntity[]>([]);\n\n  const onSelectionStart = () => {\n    props.setIsRegionSelecting(true);\n    draggableBoxesRef.current = [...props.draggableItemsMap.entries()].reduce((previous: [ISelectableEntity, Box][], [selectable, div]): [ISelectableEntity, Box][] => {\n      const rect = div.getBoundingClientRect();\n      return [\n        ...previous,\n        [selectable, rect]\n      ];\n    }, []);\n  }\n\n  const onSelectionChangeWithToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([selectable, draggableBox]) => {\n        const alreadyInRegion = wasInRegion.includes(selectable);\n        const nowInRegion = boxesIntersect(box, draggableBox);\n\n        // Item not in region and we don't need to worry about it, or item already processed\n        if (alreadyInRegion === nowInRegion) return false;\n\n        if (alreadyInRegion && !nowInRegion) {\n          // Draggable escapes a region, toggle it and remove from items in region.\n          setWasInRegion(prevSelected => prevSelected.filter((prevSelectable) => prevSelectable !== selectable));\n        }\n\n        if (!alreadyInRegion && nowInRegion) {\n          // Draggable enters a region, toggle it and add to items in region.\n          setWasInRegion(prevSelected => [...prevSelected, selectable]);\n        }\n        return true;\n      }, [])\n      .forEach(([courseModel, _]) => props.selectorViewModel.onToggle(courseModel));\n  }\n\n  const onSelectionChangeWithoutToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([selectable, draggableBox]) => {\n        const isSelected: boolean = props.selectorViewModel.getSelected().includes(selectable);\n        const isIntersecting: boolean = boxesIntersect(box, draggableBox);\n\n        return (isSelected !== isIntersecting);\n      }, [])\n      .forEach(([selectable, _]) => props.selectorViewModel.onToggle(selectable));\n  }\n\n  const onSelectionEnd = () => {\n    draggableBoxesRef.current = [];\n    setWasInRegion([]);\n  }\n\n  const { DragSelection } = useSelectionContainer({\n    onSelectionStart,\n    onSelectionEnd,\n\n    onSelectionChange: React.useCallback(\n      isToggleSelectionKeyUsed\n        ? onSelectionChangeWithToggleKey\n        : onSelectionChangeWithoutToggleKey\n      , [isToggleSelectionKeyUsed, wasInRegion]\n    ),\n  });\n\n  return (<DragSelection />)\n}\n\nexport default RegionSelect;","import React from \"react\";\nimport { DragDropContext, DragStart, DropResult } from \"react-beautiful-dnd\";\nimport { CourseModel } from \"../../../../models/CourseModel\";\nimport { ICourseGroup, PlannerViewModel } from \"../../PlannerViewModel\";\n\ninterface DraggingProps extends React.PropsWithChildren<any> {\n  plannerViewModel: PlannerViewModel\n  setIsDragging: React.Dispatch<React.SetStateAction<boolean>>\n\n}\n\nconst Dragging = (props: DraggingProps) => {\n  const courseState = props.plannerViewModel.courseState;\n\n  const onDragStart = (initial: DragStart) => {\n    props.setIsDragging(true);\n\n    const selected: CourseModel | undefined = props.plannerViewModel.getSelected().find(\n      (course: CourseModel): boolean => course.id === initial.draggableId,\n    );\n\n    if (!selected) props.plannerViewModel.unselectAll();\n\n    props.plannerViewModel.draggingCourseId = initial.draggableId;\n\n    const course = courseState.getCourseById(initial.draggableId);\n\n    if (!course) return;\n\n    // Don't calculate validations if we are multi selecting\n    if (props.plannerViewModel.selected.length > 1) return;\n\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      possibleTerms: props.plannerViewModel.calculateDisplayableTerms().filter(term => {\n        return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n      }),\n      prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n    }\n  }\n\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n    if (!destination || result.reason === \"CANCEL\") {\n      props.plannerViewModel.draggingCourseId = undefined;\n      return;\n    }\n    if (!props.plannerViewModel.draggingCourseId) return;\n\n    props.plannerViewModel.getSelected().forEach((course: CourseModel) =>\n      props.plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId)\n    );\n\n    const allGroups = props.plannerViewModel.getAllGroups();\n    allGroups.forEach((group: ICourseGroup) => {\n      group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n        !props.plannerViewModel.getSelected().find((selectedCourse: CourseModel) =>\n          selectedCourse.id === courseInGroup.id\n        )\n      )\n    })\n    props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...props.plannerViewModel.getSelected())\n\n    const draggingCourseIsSelected: boolean = !!props.plannerViewModel.getSelected().find((courseModel) => {\n      return courseModel.id === props.plannerViewModel.draggingCourseId;\n    });\n    if (!draggingCourseIsSelected) {\n      const courseModel = courseState.getCourseById(props.plannerViewModel.draggingCourseId);\n      if (courseModel) {\n        props.plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId);\n        props.plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n        props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + props.plannerViewModel.selected.length, 0, courseModel);\n      }\n    }\n\n    props.setIsDragging(false);\n\n    props.plannerViewModel.draggingCourseId = undefined;\n\n    props.plannerViewModel.clearCurrentDraggableProps()\n  }\n\n  const onBeforeCapture = () => {\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      isDragging: true,\n    }\n  }\n\n  return (\n    <DragDropContext\n      onBeforeCapture={onBeforeCapture}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    >\n      {props.children}\n    </DragDropContext>\n  )\n}\nexport default Dragging;","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components'\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel } from '../../models/CourseModel';\nimport ContextMenu from \"../../components/ContextMenu/ContextMenuView\"\nimport RegionSelect from '../../components/RegionSelect/RegionSelectView';\nimport Dragging from './components/Dragging/DraggingView';\nimport { wasToggleInSelectionGroupKeyUsed } from \"../../helpers/EventUtils\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const plannerState = plannerViewModel.plannerState;\n\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      // Drag region selection\n      const draggableItemsRef = React.useRef(new Map<CourseModel, HTMLDivElement>());\n      const [isRegionSelecting, setIsRegionSelecting] = React.useState(false);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>): (() => void) => {\n        if (!ref.current) return () => { };\n        draggableItemsRef.current.set(courseModel, ref.current);\n\n        return () => {\n          draggableItemsRef.current.delete(courseModel);\n        };\n      }\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAll();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (wasToggleInSelectionGroupKeyUsed(event)) return;\n\n        plannerViewModel.unselectAll();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const onCourseClick = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.button !== 0) return;\n\n        if (isRegionSelecting) return;\n\n        event.preventDefault();\n        if (isContextOpen) return;\n\n        if (!wasToggleInSelectionGroupKeyUsed(event)) {\n          plannerViewModel.unselectAll();\n        }\n\n        plannerViewModel.onToggle(course);\n      }\n\n      // Context menu\n      const [isContextOpen, setIsContextOpen] = React.useState(false);\n\n      const onCourseContextMenu = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (plannerViewModel.selected.includes(course)) return;\n\n        plannerViewModel.unselectAll();\n        plannerViewModel.onToggle(course);\n      }\n\n      return (\n        <React.Fragment>\n          <RegionSelect\n            selectorViewModel={plannerViewModel}\n            draggableItemsMap={draggableItemsRef.current}\n            setIsRegionSelecting={setIsRegionSelecting}\n          />\n          <ContextMenu\n            selectorViewModel={plannerViewModel}\n            isContextOpen={isContextOpen}\n            setIsContextOpen={setIsContextOpen}\n          />\n          <Dragging\n            plannerViewModel={plannerViewModel}\n            setIsDragging={setIsDragging}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                selectedCourses={plannerViewModel.getSelected()}\n                draggingCourseId={plannerViewModel.draggingCourseId}\n                onCourseClick={onCourseClick}\n                onCourseContextMenu={onCourseContextMenu}\n                isRegionSelecting={isRegionSelecting}\n                registerDraggableRef={registerDraggable}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.getSelected()}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      selectedCourses={plannerViewModel.getSelected()}\n                      draggingCourseId={plannerViewModel.draggingCourseId}\n                      onCourseClick={onCourseClick}\n                      onCourseContextMenu={onCourseContextMenu}\n                      isRegionSelecting={isRegionSelecting}\n                      registerDraggableRef={registerDraggable}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.getSelected()}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n                : <></>\n            }\n          </Dragging>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, IReactionDisposer, makeObservable, observable, reaction } from \"mobx\";\nimport { ISelectableEntity, ISelector } from \"../../interfaces/SelectableInterfaces\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel implements ISelector {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\" | \"_selected\" | \"_draggingCourseId\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n\n      _selected: observable,\n      selected: computed,\n\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedCourses\n\n  private _reactionDisposers: Map<ISelectableEntity, IReactionDisposer> = new Map();\n  private _selected: ISelectableEntity[] = [];\n\n  getSelected(): CourseModel[] {\n    return this._selected as CourseModel[];\n  }\n\n  get selected(): ISelectableEntity[] {\n    return this._selected;\n  }\n  set selected(state: ISelectableEntity[]) {\n    this._selected = state;\n  }\n\n  unselectAll() {\n    this.selected.forEach((selectable) => this._reactionDisposers.get(selectable)?.call(null));\n    this.selected = [];\n  }\n\n  private addRemoveReaction(selectable: ISelectableEntity) {\n    const reactionDisposer = reaction(\n      () => (selectable as CourseModel).courseStatus,\n      (status, prevStatus) => {\n        if (status === prevStatus) return;\n        if (status === CourseStatus.UNPLANNED) {\n          this.selected = this.getSelected().filter((selectedCourse) => selectedCourse.id !== (selectable as CourseModel).id);\n          this._reactionDisposers.get(selectable)?.call(null);\n        }\n      }\n    )\n    this._reactionDisposers.set(selectable, reactionDisposer);\n  }\n\n  onToggle(selectable: ISelectableEntity) {\n    const indexOfSelectable: number = this.selected.indexOf(selectable);\n\n    const newCourses: ISelectableEntity[] = (() => {\n      if (indexOfSelectable === -1) {\n        // Item not selected, add to group\n        this.addRemoveReaction(selectable);\n        return [...this.selected, selectable];\n      } else {\n        // Item was selected, remove it\n        const courses: ISelectableEntity[] = [...this.selected];\n        courses.splice(indexOfSelectable, 1);\n        this._reactionDisposers.get(selectable)?.call(null);\n        return courses;\n      }\n    })();\n\n    this.selected = newCourses;\n  }\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar\n          userState={applicationContext.userState}\n          searchDataState={applicationContext.searchDataState}\n        />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}